{"ast":null,"code":"import _readOnlyError from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/readOnlyError\";\nimport _slicedToArray from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\src\\\\components\\\\Mapbox.js\";\nimport React, { useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\nmapboxgl.accessToken = 'pk.eyJ1IjoieWVzc2luZTk5NyIsImEiOiJjbGgxeWNreHkwb2ptM2tvaHgwNmJmOHVmIn0.15WcHCezNiXvyOmIIIFHCQ';\nvar coordinates = [[10.2689573, 36.8940485], [10.2419855, 36.8763089], [10.1886875, 36.8453963], [10.6946992, 36.4524279], [9.8408618, 37.2811055], [8.0991981, 33.9187144]];\nvar MapboxExample = function MapboxExample(_ref) {\n  var id = _ref.id;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    eta = _useState2[0],\n    setEta = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    distance = _useState4[0],\n    setDistance = _useState4[1];\n  useEffect(function () {\n    var startIdx, endIdx;\n    do {\n      startIdx = Math.floor(Math.random() * coordinates.length);\n      endIdx = Math.floor(Math.random() * coordinates.length);\n    } while (startIdx === endIdx);\n    var start = coordinates[startIdx];\n    var end = coordinates[endIdx];\n    if (start === end) {\n      // If the randomly selected start and end are the same,\n      // select two new indices and corresponding coordinates.\n      do {\n        startIdx = Math.floor(Math.random() * coordinates.length);\n        endIdx = Math.floor(Math.random() * coordinates.length);\n      } while (startIdx === endIdx);\n      coordinates[startIdx], _readOnlyError(\"start\");\n      coordinates[endIdx], _readOnlyError(\"end\");\n    }\n    // const bounds = new mapboxgl.LngLatBounds(start, end);\n    var map = new mapboxgl.Map({\n      container: id,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: start\n    });\n    map.on('error', function (error) {\n      console.log(error);\n    });\n    map.on('load', function () {\n      fetch(\"https://api.mapbox.com/directions/v5/mapbox/driving/\".concat(start[0], \",\").concat(start[1], \";\").concat(end[0], \",\").concat(end[1], \"?geometries=geojson&access_token=\").concat(mapboxgl.accessToken)).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        // Get the duration and distance from the API response\n        var duration = data.routes[0].duration;\n        var durationInHours = Math.floor(duration / 3600);\n        var durationInMinutes = Math.floor(duration % 3600 / 60);\n        var durationInSeconds = Math.floor(duration % 60);\n        var distance = data.routes[0].distance;\n        var kilometers = Math.floor(distance / 1000);\n        var meters = Math.ceil(distance % 1000 / 100);\n        // Convert duration from seconds to minutes\n        var durationMinutes = Math.round(duration / 60);\n        if (durationInHours > 0) setEta(\"\".concat(durationInHours, \"h:\").concat(durationInMinutes, \"m\"));else setEta(\"\".concat(durationInMinutes, \"m\"));\n        setDistance(\"\".concat(kilometers, \".\").concat(meters, \" km\"));\n        // Add duration and distance to the map\n        // const popup = new mapboxgl.Popup()\n        //   .setLngLat(end)\n        //   .setHTML(\n        //     `<p>ETA: ${durationInHours}h:${durationInMinutes}m</p><p>${kilometers}.${meters} km</p>`\n        //   )\n        //   .addTo(map);\n\n        // Get the intermediate coordinates along the route\n        var coords = data.routes[0].geometry.coordinates;\n        // console.log(coords);\n\n        var bounds = new mapboxgl.LngLatBounds();\n\n        // Create an array to hold the intermediate coordinates\n        var intermediateCoords = [];\n\n        // Iterate through each coordinate in the array\n        coords.forEach(function (coord) {\n          // Create a new LngLat object for the current coordinate\n          var lngLat = new mapboxgl.LngLat(coord[0], coord[1]);\n          // Add the LngLat object to the bounds object\n          bounds.extend(lngLat);\n\n          // Add the LngLat object to the intermediateCoords array\n          intermediateCoords.push(lngLat.toArray());\n        });\n\n        // Add the start and end points to the intermediateCoords array\n        intermediateCoords.unshift(start);\n        intermediateCoords.push(end);\n        map.addSource('route', {\n          type: 'geojson',\n          data: {\n            type: 'Feature',\n            properties: {},\n            geometry: {\n              type: 'LineString',\n              coordinates: intermediateCoords\n            }\n          }\n        });\n        map.addLayer({\n          id: 'route',\n          type: 'line',\n          source: 'route',\n          layout: {\n            'line-join': 'round',\n            'line-cap': 'round'\n          },\n          paint: {\n            'line-color': '#888',\n            'line-width': 8\n          }\n        });\n        map.addLayer({\n          id: 'start',\n          type: 'circle',\n          source: {\n            type: 'geojson',\n            data: {\n              type: 'Feature',\n              geometry: {\n                type: 'Point',\n                coordinates: start\n              }\n            }\n          },\n          paint: {\n            'circle-radius': 10,\n            'circle-color': '#3887be'\n          }\n        });\n        map.addLayer({\n          id: 'end',\n          type: 'circle',\n          source: {\n            type: 'geojson',\n            data: {\n              type: 'Feature',\n              geometry: {\n                type: 'Point',\n                coordinates: end\n              }\n            }\n          },\n          paint: {\n            'circle-radius': 10,\n            'circle-color': '#f30'\n          }\n        });\n        map.fitBounds(bounds, {\n          padding: {\n            top: 50,\n            bottom: 50,\n            left: 50,\n            right: 50\n          }\n        });\n      });\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: id,\n    style: {\n      width: '100%',\n      height: '300px',\n      alignContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, \"Dur\\xE9e: \", eta), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }, distance));\n};\nexport default MapboxExample;","map":{"version":3,"names":["React","useEffect","useState","mapboxgl","workerClass","require","default","accessToken","coordinates","MapboxExample","_ref","id","_useState","_useState2","_slicedToArray","eta","setEta","_useState3","_useState4","distance","setDistance","startIdx","endIdx","Math","floor","random","length","start","end","_readOnlyError","map","Map","container","style","center","on","error","console","log","fetch","concat","then","response","json","data","duration","routes","durationInHours","durationInMinutes","durationInSeconds","kilometers","meters","ceil","durationMinutes","round","coords","geometry","bounds","LngLatBounds","intermediateCoords","forEach","coord","lngLat","LngLat","extend","push","toArray","unshift","addSource","type","properties","addLayer","source","layout","paint","fitBounds","padding","top","bottom","left","right","createElement","width","height","alignContent","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/ASUS VivoBook/Desktop/PI - Copie/client/src/components/Mapbox.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\r\nmapboxgl.accessToken =\r\n  'pk.eyJ1IjoieWVzc2luZTk5NyIsImEiOiJjbGgxeWNreHkwb2ptM2tvaHgwNmJmOHVmIn0.15WcHCezNiXvyOmIIIFHCQ';\r\n\r\nconst coordinates = [\r\n  [10.2689573, 36.8940485],\r\n  [10.2419855, 36.8763089],\r\n  [10.1886875, 36.8453963],\r\n  [10.6946992, 36.4524279],\r\n  [9.8408618, 37.2811055],\r\n  [8.0991981, 33.9187144],\r\n];\r\n\r\nconst MapboxExample = ({ id }) => {\r\n  const [eta, setEta] = useState('');\r\n  const [distance, setDistance] = useState('');\r\n  useEffect(() => {\r\n    let startIdx, endIdx;\r\n    do {\r\n      startIdx = Math.floor(Math.random() * coordinates.length);\r\n      endIdx = Math.floor(Math.random() * coordinates.length);\r\n    } while (startIdx === endIdx);\r\n\r\n    const start = coordinates[startIdx];\r\n    const end = coordinates[endIdx];\r\n\r\n    if (start === end) {\r\n      // If the randomly selected start and end are the same,\r\n      // select two new indices and corresponding coordinates.\r\n      do {\r\n        startIdx = Math.floor(Math.random() * coordinates.length);\r\n        endIdx = Math.floor(Math.random() * coordinates.length);\r\n      } while (startIdx === endIdx);\r\n\r\n      start = coordinates[startIdx];\r\n      end = coordinates[endIdx];\r\n    }\r\n    // const bounds = new mapboxgl.LngLatBounds(start, end);\r\n    const map = new mapboxgl.Map({\r\n      container: id,\r\n      style: 'mapbox://styles/mapbox/streets-v11',\r\n      center: start,\r\n    });\r\n\r\n    map.on('error', (error) => {\r\n      console.log(error);\r\n    });\r\n\r\n    map.on('load', () => {\r\n      fetch(\r\n        `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?geometries=geojson&access_token=${mapboxgl.accessToken}`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          // Get the duration and distance from the API response\r\n          const duration = data.routes[0].duration;\r\n\r\n          const durationInHours = Math.floor(duration / 3600);\r\n          const durationInMinutes = Math.floor((duration % 3600) / 60);\r\n          const durationInSeconds = Math.floor(duration % 60);\r\n          const distance = data.routes[0].distance;\r\n          const kilometers = Math.floor(distance / 1000);\r\n          const meters = Math.ceil((distance % 1000) / 100);\r\n          // Convert duration from seconds to minutes\r\n          const durationMinutes = Math.round(duration / 60);\r\n          if (durationInHours > 0)\r\n            setEta(`${durationInHours}h:${durationInMinutes}m`);\r\n          else setEta(`${durationInMinutes}m`);\r\n          setDistance(`${kilometers}.${meters} km`);\r\n          // Add duration and distance to the map\r\n          // const popup = new mapboxgl.Popup()\r\n          //   .setLngLat(end)\r\n          //   .setHTML(\r\n          //     `<p>ETA: ${durationInHours}h:${durationInMinutes}m</p><p>${kilometers}.${meters} km</p>`\r\n          //   )\r\n          //   .addTo(map);\r\n\r\n          // Get the intermediate coordinates along the route\r\n          const coords = data.routes[0].geometry.coordinates;\r\n          // console.log(coords);\r\n\r\n          const bounds = new mapboxgl.LngLatBounds();\r\n\r\n          // Create an array to hold the intermediate coordinates\r\n          const intermediateCoords = [];\r\n\r\n          // Iterate through each coordinate in the array\r\n          coords.forEach((coord) => {\r\n            // Create a new LngLat object for the current coordinate\r\n            const lngLat = new mapboxgl.LngLat(coord[0], coord[1]);\r\n            // Add the LngLat object to the bounds object\r\n            bounds.extend(lngLat);\r\n\r\n            // Add the LngLat object to the intermediateCoords array\r\n            intermediateCoords.push(lngLat.toArray());\r\n          });\r\n\r\n          // Add the start and end points to the intermediateCoords array\r\n          intermediateCoords.unshift(start);\r\n          intermediateCoords.push(end);\r\n          map.addSource('route', {\r\n            type: 'geojson',\r\n            data: {\r\n              type: 'Feature',\r\n              properties: {},\r\n              geometry: {\r\n                type: 'LineString',\r\n                coordinates: intermediateCoords,\r\n              },\r\n            },\r\n          });\r\n          map.addLayer({\r\n            id: 'route',\r\n            type: 'line',\r\n            source: 'route',\r\n            layout: {\r\n              'line-join': 'round',\r\n              'line-cap': 'round',\r\n            },\r\n            paint: {\r\n              'line-color': '#888',\r\n              'line-width': 8,\r\n            },\r\n          });\r\n\r\n          map.addLayer({\r\n            id: 'start',\r\n            type: 'circle',\r\n            source: {\r\n              type: 'geojson',\r\n              data: {\r\n                type: 'Feature',\r\n                geometry: {\r\n                  type: 'Point',\r\n                  coordinates: start,\r\n                },\r\n              },\r\n            },\r\n            paint: {\r\n              'circle-radius': 10,\r\n              'circle-color': '#3887be',\r\n            },\r\n          });\r\n\r\n          map.addLayer({\r\n            id: 'end',\r\n            type: 'circle',\r\n            source: {\r\n              type: 'geojson',\r\n              data: {\r\n                type: 'Feature',\r\n                geometry: {\r\n                  type: 'Point',\r\n                  coordinates: end,\r\n                },\r\n              },\r\n            },\r\n            paint: {\r\n              'circle-radius': 10,\r\n              'circle-color': '#f30',\r\n            },\r\n          });\r\n          map.fitBounds(bounds, {\r\n            padding: { top: 50, bottom: 50, left: 50, right: 50 },\r\n          });\r\n        });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      id={id}\r\n      style={{ width: '100%', height: '300px', alignContent: 'center' }}\r\n    >\r\n      {/* map will be loaded here */}\r\n      <span>Durée: {eta}</span>\r\n      <br />\r\n      <span>{distance}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapboxExample;\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,WAAW;AAChC;AACAA,QAAQ,CAACC,WAAW,GAAGC,OAAO,CAAC,mDAAmD,CAAC,CAACC,OAAO;AAC3FH,QAAQ,CAACI,WAAW,GAClB,+FAA+F;AAEjG,IAAMC,WAAW,GAAG,CAClB,CAAC,UAAU,EAAE,UAAU,CAAC,EACxB,CAAC,UAAU,EAAE,UAAU,CAAC,EACxB,CAAC,UAAU,EAAE,UAAU,CAAC,EACxB,CAAC,UAAU,EAAE,UAAU,CAAC,EACxB,CAAC,SAAS,EAAE,UAAU,CAAC,EACvB,CAAC,SAAS,EAAE,UAAU,CAAC,CACxB;AAED,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAe;EAAA,IAATC,EAAE,GAAAD,IAAA,CAAFC,EAAE;EAAA,IAAAC,SAAA,GACHV,QAAQ,CAAC,EAAE,CAAC;IAAAW,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA3BG,GAAG,GAAAF,UAAA;IAAEG,MAAM,GAAAH,UAAA;EAAA,IAAAI,UAAA,GACcf,QAAQ,CAAC,EAAE,CAAC;IAAAgB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5BjB,SAAS,CAAC,YAAM;IACd,IAAIoB,QAAQ,EAAEC,MAAM;IACpB,GAAG;MACDD,QAAQ,GAAGE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGjB,WAAW,CAACkB,MAAM,CAAC;MACzDJ,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGjB,WAAW,CAACkB,MAAM,CAAC;IACzD,CAAC,QAAQL,QAAQ,KAAKC,MAAM;IAE5B,IAAMK,KAAK,GAAGnB,WAAW,CAACa,QAAQ,CAAC;IACnC,IAAMO,GAAG,GAAGpB,WAAW,CAACc,MAAM,CAAC;IAE/B,IAAIK,KAAK,KAAKC,GAAG,EAAE;MACjB;MACA;MACA,GAAG;QACDP,QAAQ,GAAGE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGjB,WAAW,CAACkB,MAAM,CAAC;QACzDJ,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGjB,WAAW,CAACkB,MAAM,CAAC;MACzD,CAAC,QAAQL,QAAQ,KAAKC,MAAM;MAEpBd,WAAW,CAACa,QAAQ,CAAC,EAAAQ,cAAA;MACvBrB,WAAW,CAACc,MAAM,CAAC,EAAAO,cAAA;IAC3B;IACA;IACA,IAAMC,GAAG,GAAG,IAAI3B,QAAQ,CAAC4B,GAAG,CAAC;MAC3BC,SAAS,EAAErB,EAAE;MACbsB,KAAK,EAAE,oCAAoC;MAC3CC,MAAM,EAAEP;IACV,CAAC,CAAC;IAEFG,GAAG,CAACK,EAAE,CAAC,OAAO,EAAE,UAACC,KAAK,EAAK;MACzBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB,CAAC,CAAC;IAEFN,GAAG,CAACK,EAAE,CAAC,MAAM,EAAE,YAAM;MACnBI,KAAK,wDAAAC,MAAA,CACoDb,KAAK,CAAC,CAAC,CAAC,OAAAa,MAAA,CAAIb,KAAK,CAAC,CAAC,CAAC,OAAAa,MAAA,CAAIZ,GAAG,CAAC,CAAC,CAAC,OAAAY,MAAA,CAAIZ,GAAG,CAAC,CAAC,CAAC,uCAAAY,MAAA,CAAoCrC,QAAQ,CAACI,WAAW,CACzJ,CAAC,CACEkC,IAAI,CAAC,UAACC,QAAQ;QAAA,OAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC;MAAA,EAAC,CACnCF,IAAI,CAAC,UAACG,IAAI,EAAK;QACd;QACA,IAAMC,QAAQ,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACD,QAAQ;QAExC,IAAME,eAAe,GAAGxB,IAAI,CAACC,KAAK,CAACqB,QAAQ,GAAG,IAAI,CAAC;QACnD,IAAMG,iBAAiB,GAAGzB,IAAI,CAACC,KAAK,CAAEqB,QAAQ,GAAG,IAAI,GAAI,EAAE,CAAC;QAC5D,IAAMI,iBAAiB,GAAG1B,IAAI,CAACC,KAAK,CAACqB,QAAQ,GAAG,EAAE,CAAC;QACnD,IAAM1B,QAAQ,GAAGyB,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC3B,QAAQ;QACxC,IAAM+B,UAAU,GAAG3B,IAAI,CAACC,KAAK,CAACL,QAAQ,GAAG,IAAI,CAAC;QAC9C,IAAMgC,MAAM,GAAG5B,IAAI,CAAC6B,IAAI,CAAEjC,QAAQ,GAAG,IAAI,GAAI,GAAG,CAAC;QACjD;QACA,IAAMkC,eAAe,GAAG9B,IAAI,CAAC+B,KAAK,CAACT,QAAQ,GAAG,EAAE,CAAC;QACjD,IAAIE,eAAe,GAAG,CAAC,EACrB/B,MAAM,IAAAwB,MAAA,CAAIO,eAAe,QAAAP,MAAA,CAAKQ,iBAAiB,MAAG,CAAC,CAAC,KACjDhC,MAAM,IAAAwB,MAAA,CAAIQ,iBAAiB,MAAG,CAAC;QACpC5B,WAAW,IAAAoB,MAAA,CAAIU,UAAU,OAAAV,MAAA,CAAIW,MAAM,QAAK,CAAC;QACzC;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA,IAAMI,MAAM,GAAGX,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACU,QAAQ,CAAChD,WAAW;QAClD;;QAEA,IAAMiD,MAAM,GAAG,IAAItD,QAAQ,CAACuD,YAAY,CAAC,CAAC;;QAE1C;QACA,IAAMC,kBAAkB,GAAG,EAAE;;QAE7B;QACAJ,MAAM,CAACK,OAAO,CAAC,UAACC,KAAK,EAAK;UACxB;UACA,IAAMC,MAAM,GAAG,IAAI3D,QAAQ,CAAC4D,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;UACtD;UACAJ,MAAM,CAACO,MAAM,CAACF,MAAM,CAAC;;UAErB;UACAH,kBAAkB,CAACM,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC;;QAEF;QACAP,kBAAkB,CAACQ,OAAO,CAACxC,KAAK,CAAC;QACjCgC,kBAAkB,CAACM,IAAI,CAACrC,GAAG,CAAC;QAC5BE,GAAG,CAACsC,SAAS,CAAC,OAAO,EAAE;UACrBC,IAAI,EAAE,SAAS;UACfzB,IAAI,EAAE;YACJyB,IAAI,EAAE,SAAS;YACfC,UAAU,EAAE,CAAC,CAAC;YACdd,QAAQ,EAAE;cACRa,IAAI,EAAE,YAAY;cAClB7D,WAAW,EAAEmD;YACf;UACF;QACF,CAAC,CAAC;QACF7B,GAAG,CAACyC,QAAQ,CAAC;UACX5D,EAAE,EAAE,OAAO;UACX0D,IAAI,EAAE,MAAM;UACZG,MAAM,EAAE,OAAO;UACfC,MAAM,EAAE;YACN,WAAW,EAAE,OAAO;YACpB,UAAU,EAAE;UACd,CAAC;UACDC,KAAK,EAAE;YACL,YAAY,EAAE,MAAM;YACpB,YAAY,EAAE;UAChB;QACF,CAAC,CAAC;QAEF5C,GAAG,CAACyC,QAAQ,CAAC;UACX5D,EAAE,EAAE,OAAO;UACX0D,IAAI,EAAE,QAAQ;UACdG,MAAM,EAAE;YACNH,IAAI,EAAE,SAAS;YACfzB,IAAI,EAAE;cACJyB,IAAI,EAAE,SAAS;cACfb,QAAQ,EAAE;gBACRa,IAAI,EAAE,OAAO;gBACb7D,WAAW,EAAEmB;cACf;YACF;UACF,CAAC;UACD+C,KAAK,EAAE;YACL,eAAe,EAAE,EAAE;YACnB,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QAEF5C,GAAG,CAACyC,QAAQ,CAAC;UACX5D,EAAE,EAAE,KAAK;UACT0D,IAAI,EAAE,QAAQ;UACdG,MAAM,EAAE;YACNH,IAAI,EAAE,SAAS;YACfzB,IAAI,EAAE;cACJyB,IAAI,EAAE,SAAS;cACfb,QAAQ,EAAE;gBACRa,IAAI,EAAE,OAAO;gBACb7D,WAAW,EAAEoB;cACf;YACF;UACF,CAAC;UACD8C,KAAK,EAAE;YACL,eAAe,EAAE,EAAE;YACnB,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QACF5C,GAAG,CAAC6C,SAAS,CAAClB,MAAM,EAAE;UACpBmB,OAAO,EAAE;YAAEC,GAAG,EAAE,EAAE;YAAEC,MAAM,EAAE,EAAE;YAAEC,IAAI,EAAE,EAAE;YAAEC,KAAK,EAAE;UAAG;QACtD,CAAC,CAAC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhF,KAAA,CAAAiF,aAAA;IACEtE,EAAE,EAAEA,EAAG;IACPsB,KAAK,EAAE;MAAEiD,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,OAAO;MAAEC,YAAY,EAAE;IAAS,CAAE;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAGlE3F,KAAA,CAAAiF,aAAA;IAAAI,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAM,YAAO,EAAC5E,GAAU,CAAC,eACzBf,KAAA,CAAAiF,aAAA;IAAAI,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAK,CAAC,eACN3F,KAAA,CAAAiF,aAAA;IAAAI,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAOxE,QAAe,CACnB,CAAC;AAEV,CAAC;AAED,eAAeV,aAAa"},"metadata":{},"sourceType":"module"}