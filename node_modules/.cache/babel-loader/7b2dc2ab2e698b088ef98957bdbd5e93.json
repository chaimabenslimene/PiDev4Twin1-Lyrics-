{"ast":null,"code":"\"use strict\";\n\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _asyncToGenerator = require(\"D:\\\\projects\\\\userpi\\\\userpi\\\\userpi\\\\client\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"D:\\\\projects\\\\userpi\\\\userpi\\\\userpi\\\\client\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"D:\\\\projects\\\\userpi\\\\userpi\\\\userpi\\\\client\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"D:\\\\projects\\\\userpi\\\\userpi\\\\userpi\\\\client\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"D:\\\\projects\\\\userpi\\\\userpi\\\\userpi\\\\client\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"D:\\\\projects\\\\userpi\\\\userpi\\\\userpi\\\\client\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"D:\\\\projects\\\\userpi\\\\userpi\\\\userpi\\\\client\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JWT = void 0;\nvar gtoken_1 = require(\"gtoken\");\nvar jwtaccess_1 = require(\"./jwtaccess\");\nvar oauth2client_1 = require(\"./oauth2client\");\nvar JWT = /*#__PURE__*/function (_oauth2client_1$OAuth) {\n  _inherits(JWT, _oauth2client_1$OAuth);\n  function JWT(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    var _this;\n    _classCallCheck(this, JWT);\n    var opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile: keyFile,\n      key: key,\n      keyId: keyId,\n      scopes: scopes,\n      subject: subject\n    };\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(JWT).call(this, {\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n      forceRefreshOnFailure: opts.forceRefreshOnFailure\n    }));\n    _this.email = opts.email;\n    _this.keyFile = opts.keyFile;\n    _this.key = opts.key;\n    _this.keyId = opts.keyId;\n    _this.scopes = opts.scopes;\n    _this.subject = opts.subject;\n    _this.additionalClaims = opts.additionalClaims;\n    _this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n    return _this;\n  }\n  /**\n   * Creates a copy of the credential with the specified scopes.\n   * @param scopes List of requested scopes or a single scope.\n   * @return The cloned instance.\n   */\n  _createClass(JWT, [{\n    key: \"createScoped\",\n    value: function createScoped(scopes) {\n      return new JWT({\n        email: this.email,\n        keyFile: this.keyFile,\n        key: this.key,\n        keyId: this.keyId,\n        scopes: scopes,\n        subject: this.subject,\n        additionalClaims: this.additionalClaims\n      });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n  }, {\n    key: \"getRequestMetadataAsync\",\n    value: function () {\n      var _getRequestMetadataAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n        var useSelfSignedJWT, _yield$this$refreshTo, tokens, scopes, headers;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              url = this.defaultServicePath ? \"https://\".concat(this.defaultServicePath, \"/\") : url;\n              useSelfSignedJWT = !this.hasUserScopes() && url || this.useJWTAccessWithScope && this.hasAnyScopes();\n              if (!(!this.apiKey && useSelfSignedJWT)) {\n                _context.next = 19;\n                break;\n              }\n              if (!(this.additionalClaims && this.additionalClaims.target_audience)) {\n                _context.next = 11;\n                break;\n              }\n              _context.next = 6;\n              return this.refreshToken();\n            case 6:\n              _yield$this$refreshTo = _context.sent;\n              tokens = _yield$this$refreshTo.tokens;\n              return _context.abrupt(\"return\", {\n                headers: this.addSharedMetadataHeaders({\n                  Authorization: \"Bearer \".concat(tokens.id_token)\n                })\n              });\n            case 11:\n              // no scopes have been set, but a uri has been provided. Use JWTAccess\n              // credentials.\n              if (!this.access) {\n                this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n              }\n              if (this.hasUserScopes()) {\n                scopes = this.scopes;\n              } else if (!url) {\n                scopes = this.defaultScopes;\n              }\n              _context.next = 15;\n              return this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims,\n              // Scopes take precedent over audience for signing,\n              // so we only provide them if useJWTAccessWithScope is on\n              this.useJWTAccessWithScope ? scopes : undefined);\n            case 15:\n              headers = _context.sent;\n              return _context.abrupt(\"return\", {\n                headers: this.addSharedMetadataHeaders(headers)\n              });\n            case 17:\n              _context.next = 24;\n              break;\n            case 19:\n              if (!(this.hasAnyScopes() || this.apiKey)) {\n                _context.next = 23;\n                break;\n              }\n              return _context.abrupt(\"return\", _get(_getPrototypeOf(JWT.prototype), \"getRequestMetadataAsync\", this).call(this, url));\n            case 23:\n              return _context.abrupt(\"return\", {\n                headers: {}\n              });\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getRequestMetadataAsync(_x) {\n        return _getRequestMetadataAsync.apply(this, arguments);\n      }\n      return getRequestMetadataAsync;\n    }()\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n  }, {\n    key: \"fetchIdToken\",\n    value: function () {\n      var _fetchIdToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(targetAudience) {\n        var gtoken;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // Create a new gToken for fetching an ID token\n              gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes || this.defaultScopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: {\n                  target_audience: targetAudience\n                },\n                transporter: this.transporter\n              });\n              _context2.next = 3;\n              return gtoken.getToken({\n                forceRefresh: true\n              });\n            case 3:\n              if (gtoken.idToken) {\n                _context2.next = 5;\n                break;\n              }\n              throw new Error('Unknown error: Failed to fetch ID token');\n            case 5:\n              return _context2.abrupt(\"return\", gtoken.idToken);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function fetchIdToken(_x2) {\n        return _fetchIdToken.apply(this, arguments);\n      }\n      return fetchIdToken;\n    }()\n    /**\n     * Determine if there are currently scopes available.\n     */\n  }, {\n    key: \"hasUserScopes\",\n    value: function hasUserScopes() {\n      if (!this.scopes) {\n        return false;\n      }\n      return this.scopes.length > 0;\n    }\n    /**\n     * Are there any default or user scopes defined.\n     */\n  }, {\n    key: \"hasAnyScopes\",\n    value: function hasAnyScopes() {\n      if (this.scopes && this.scopes.length > 0) return true;\n      if (this.defaultScopes && this.defaultScopes.length > 0) return true;\n      return false;\n    }\n  }, {\n    key: \"authorize\",\n    value: function authorize(callback) {\n      if (callback) {\n        this.authorizeAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.authorizeAsync();\n      }\n    }\n  }, {\n    key: \"authorizeAsync\",\n    value: function () {\n      var _authorizeAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.refreshToken();\n            case 2:\n              result = _context3.sent;\n              if (result) {\n                _context3.next = 5;\n                break;\n              }\n              throw new Error('No result returned');\n            case 5:\n              this.credentials = result.tokens;\n              this.credentials.refresh_token = 'jwt-placeholder';\n              this.key = this.gtoken.key;\n              this.email = this.gtoken.iss;\n              return _context3.abrupt(\"return\", result.tokens);\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function authorizeAsync() {\n        return _authorizeAsync.apply(this, arguments);\n      }\n      return authorizeAsync;\n    }()\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n  }, {\n    key: \"refreshTokenNoCache\",\n    value: function () {\n      var _refreshTokenNoCache = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      refreshToken) {\n        var gtoken, token, tokens;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              gtoken = this.createGToken();\n              _context4.next = 3;\n              return gtoken.getToken({\n                forceRefresh: this.isTokenExpiring()\n              });\n            case 3:\n              token = _context4.sent;\n              tokens = {\n                access_token: token.access_token,\n                token_type: 'Bearer',\n                expiry_date: gtoken.expiresAt,\n                id_token: gtoken.idToken\n              };\n              this.emit('tokens', tokens);\n              return _context4.abrupt(\"return\", {\n                res: null,\n                tokens: tokens\n              });\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function refreshTokenNoCache(_x3) {\n        return _refreshTokenNoCache.apply(this, arguments);\n      }\n      return refreshTokenNoCache;\n    }()\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n  }, {\n    key: \"createGToken\",\n    value: function createGToken() {\n      if (!this.gtoken) {\n        this.gtoken = new gtoken_1.GoogleToken({\n          iss: this.email,\n          sub: this.subject,\n          scope: this.scopes || this.defaultScopes,\n          keyFile: this.keyFile,\n          key: this.key,\n          additionalClaims: this.additionalClaims,\n          transporter: this.transporter\n        });\n      }\n      return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing the service account auth settings.');\n      }\n      if (!json.client_email) {\n        throw new Error('The incoming JSON object does not contain a client_email field');\n      }\n      if (!json.private_key) {\n        throw new Error('The incoming JSON object does not contain a private_key field');\n      }\n      // Extract the relevant information from the json key file.\n      this.email = json.client_email;\n      this.key = json.private_key;\n      this.keyId = json.private_key_id;\n      this.projectId = json.project_id;\n      this.quotaProjectId = json.quota_project_id;\n    }\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(inputStream, callback) {\n      if (callback) {\n        this.fromStreamAsync(inputStream).then(function () {\n          return callback();\n        }, callback);\n      } else {\n        return this.fromStreamAsync(inputStream);\n      }\n    }\n  }, {\n    key: \"fromStreamAsync\",\n    value: function fromStreamAsync(inputStream) {\n      var _this2 = this;\n      return new Promise(function (resolve, reject) {\n        if (!inputStream) {\n          throw new Error('Must pass in a stream containing the service account auth settings.');\n        }\n        var s = '';\n        inputStream.setEncoding('utf8').on('error', reject).on('data', function (chunk) {\n          return s += chunk;\n        }).on('end', function () {\n          try {\n            var data = JSON.parse(s);\n            _this2.fromJSON(data);\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n  }, {\n    key: \"fromAPIKey\",\n    value: function fromAPIKey(apiKey) {\n      if (typeof apiKey !== 'string') {\n        throw new Error('Must provide an API Key string.');\n      }\n      this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n  }, {\n    key: \"getCredentials\",\n    value: function () {\n      var _getCredentials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var gtoken, creds;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!this.key) {\n                _context5.next = 4;\n                break;\n              }\n              return _context5.abrupt(\"return\", {\n                private_key: this.key,\n                client_email: this.email\n              });\n            case 4:\n              if (!this.keyFile) {\n                _context5.next = 10;\n                break;\n              }\n              gtoken = this.createGToken();\n              _context5.next = 8;\n              return gtoken.getCredentials(this.keyFile);\n            case 8:\n              creds = _context5.sent;\n              return _context5.abrupt(\"return\", {\n                private_key: creds.privateKey,\n                client_email: creds.clientEmail\n              });\n            case 10:\n              throw new Error('A key or a keyFile must be provided to getCredentials.');\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function getCredentials() {\n        return _getCredentials.apply(this, arguments);\n      }\n      return getCredentials;\n    }()\n  }]);\n  return JWT;\n}(oauth2client_1.OAuth2Client);\nexports.JWT = JWT;","map":null,"metadata":{},"sourceType":"script"}