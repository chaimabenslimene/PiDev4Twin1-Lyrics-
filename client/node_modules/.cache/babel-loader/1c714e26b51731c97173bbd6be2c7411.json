{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsRequestSigner = void 0;\nvar crypto_1 = require(\"../crypto/crypto\");\n/** AWS Signature Version 4 signing algorithm identifier.  */\nvar AWS_ALGORITHM = 'AWS4-HMAC-SHA256';\n/**\n * The termination string for the AWS credential scope value as defined in\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n */\nvar AWS_REQUEST_TYPE = 'aws4_request';\n/**\n * Implements an AWS API request signer based on the AWS Signature Version 4\n * signing process.\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nvar AwsRequestSigner = /*#__PURE__*/function () {\n  /**\n   * Instantiates an AWS API request signer used to send authenticated signed\n   * requests to AWS APIs based on the AWS Signature Version 4 signing process.\n   * This also provides a mechanism to generate the signed request without\n   * sending it.\n   * @param getCredentials A mechanism to retrieve AWS security credentials\n   *   when needed.\n   * @param region The AWS region to use.\n   */\n  function AwsRequestSigner(getCredentials, region) {\n    _classCallCheck(this, AwsRequestSigner);\n    this.getCredentials = getCredentials;\n    this.region = region;\n    this.crypto = (0, crypto_1.createCrypto)();\n  }\n  /**\n   * Generates the signed request for the provided HTTP request for calling\n   * an AWS API. This follows the steps described at:\n   * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n   * @param amzOptions The AWS request options that need to be signed.\n   * @return A promise that resolves with the GaxiosOptions containing the\n   *   signed HTTP request parameters.\n   */\n  _createClass(AwsRequestSigner, [{\n    key: \"getRequestOptions\",\n    value: function () {\n      var _getRequestOptions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(amzOptions) {\n        var requestPayloadData, url, method, requestPayload, additionalAmzHeaders, awsSecurityCredentials, uri, headerMap, headers, awsSignedReq;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (amzOptions.url) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error('\"url\" is required in \"amzOptions\"');\n            case 2:\n              // Stringify JSON requests. This will be set in the request body of the\n              // generated signed request.\n              requestPayloadData = typeof amzOptions.data === 'object' ? JSON.stringify(amzOptions.data) : amzOptions.data;\n              url = amzOptions.url;\n              method = amzOptions.method || 'GET';\n              requestPayload = amzOptions.body || requestPayloadData;\n              additionalAmzHeaders = amzOptions.headers;\n              _context.next = 9;\n              return this.getCredentials();\n            case 9:\n              awsSecurityCredentials = _context.sent;\n              uri = new URL(url);\n              _context.next = 13;\n              return generateAuthenticationHeaderMap({\n                crypto: this.crypto,\n                host: uri.host,\n                canonicalUri: uri.pathname,\n                canonicalQuerystring: uri.search.substr(1),\n                method: method,\n                region: this.region,\n                securityCredentials: awsSecurityCredentials,\n                requestPayload: requestPayload,\n                additionalAmzHeaders: additionalAmzHeaders\n              });\n            case 13:\n              headerMap = _context.sent;\n              // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\n              headers = Object.assign(\n              // Add x-amz-date if available.\n              headerMap.amzDate ? {\n                'x-amz-date': headerMap.amzDate\n              } : {}, {\n                Authorization: headerMap.authorizationHeader,\n                host: uri.host\n              }, additionalAmzHeaders || {});\n              if (awsSecurityCredentials.token) {\n                Object.assign(headers, {\n                  'x-amz-security-token': awsSecurityCredentials.token\n                });\n              }\n              awsSignedReq = {\n                url: url,\n                method: method,\n                headers: headers\n              };\n              if (typeof requestPayload !== 'undefined') {\n                awsSignedReq.body = requestPayload;\n              }\n              return _context.abrupt(\"return\", awsSignedReq);\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getRequestOptions(_x) {\n        return _getRequestOptions.apply(this, arguments);\n      }\n      return getRequestOptions;\n    }()\n  }]);\n  return AwsRequestSigner;\n}();\nexports.AwsRequestSigner = AwsRequestSigner;\n/**\n * Creates the HMAC-SHA256 hash of the provided message using the\n * provided key.\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The HMAC-SHA256 key to use.\n * @param msg The message to hash.\n * @return The computed hash bytes.\n */\nfunction sign(_x2, _x3, _x4) {\n  return _sign.apply(this, arguments);\n}\n/**\n * Calculates the signing key used to calculate the signature for\n * AWS Signature Version 4 based on:\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The AWS secret access key.\n * @param dateStamp The '%Y%m%d' date format.\n * @param region The AWS region.\n * @param serviceName The AWS service name, eg. sts.\n * @return The signing key bytes.\n */\nfunction _sign() {\n  _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(crypto, key, msg) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return crypto.signWithHmacSha256(key, msg);\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _sign.apply(this, arguments);\n}\nfunction getSigningKey(_x5, _x6, _x7, _x8, _x9) {\n  return _getSigningKey.apply(this, arguments);\n}\n/**\n * Generates the authentication header map needed for generating the AWS\n * Signature Version 4 signed request.\n *\n * @param option The options needed to compute the authentication header map.\n * @return The AWS authentication header map which constitutes of the following\n *   components: amz-date, authorization header and canonical query string.\n */\nfunction _getSigningKey() {\n  _getSigningKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(crypto, key, dateStamp, region, serviceName) {\n    var kDate, kRegion, kService, kSigning;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return sign(crypto, \"AWS4\".concat(key), dateStamp);\n        case 2:\n          kDate = _context3.sent;\n          _context3.next = 5;\n          return sign(crypto, kDate, region);\n        case 5:\n          kRegion = _context3.sent;\n          _context3.next = 8;\n          return sign(crypto, kRegion, serviceName);\n        case 8:\n          kService = _context3.sent;\n          _context3.next = 11;\n          return sign(crypto, kService, 'aws4_request');\n        case 11:\n          kSigning = _context3.sent;\n          return _context3.abrupt(\"return\", kSigning);\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _getSigningKey.apply(this, arguments);\n}\nfunction generateAuthenticationHeaderMap(_x10) {\n  return _generateAuthenticationHeaderMap.apply(this, arguments);\n}\nfunction _generateAuthenticationHeaderMap() {\n  _generateAuthenticationHeaderMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(options) {\n    var additionalAmzHeaders, requestPayload, serviceName, now, amzDate, dateStamp, reformattedAdditionalAmzHeaders, amzHeaders, canonicalHeaders, signedHeadersList, signedHeaders, payloadHash, canonicalRequest, credentialScope, stringToSign, signingKey, signature, authorizationHeader;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          additionalAmzHeaders = options.additionalAmzHeaders || {};\n          requestPayload = options.requestPayload || ''; // iam.amazonaws.com host => iam service.\n          // sts.us-east-2.amazonaws.com => sts service.\n          serviceName = options.host.split('.')[0];\n          now = new Date(); // Format: '%Y%m%dT%H%M%SZ'.\n          amzDate = now.toISOString().replace(/[-:]/g, '').replace(/\\.[0-9]+/, ''); // Format: '%Y%m%d'.\n          dateStamp = now.toISOString().replace(/[-]/g, '').replace(/T.*/, ''); // Change all additional headers to be lower case.\n          reformattedAdditionalAmzHeaders = {};\n          Object.keys(additionalAmzHeaders).forEach(function (key) {\n            reformattedAdditionalAmzHeaders[key.toLowerCase()] = additionalAmzHeaders[key];\n          });\n          // Add AWS token if available.\n          if (options.securityCredentials.token) {\n            reformattedAdditionalAmzHeaders['x-amz-security-token'] = options.securityCredentials.token;\n          }\n          // Header keys need to be sorted alphabetically.\n          amzHeaders = Object.assign({\n            host: options.host\n          },\n          // Previously the date was not fixed with x-amz- and could be provided manually.\n          // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\n          reformattedAdditionalAmzHeaders.date ? {} : {\n            'x-amz-date': amzDate\n          }, reformattedAdditionalAmzHeaders);\n          canonicalHeaders = '';\n          signedHeadersList = Object.keys(amzHeaders).sort();\n          signedHeadersList.forEach(function (key) {\n            canonicalHeaders += \"\".concat(key, \":\").concat(amzHeaders[key], \"\\n\");\n          });\n          signedHeaders = signedHeadersList.join(';');\n          _context4.next = 16;\n          return options.crypto.sha256DigestHex(requestPayload);\n        case 16:\n          payloadHash = _context4.sent;\n          // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n          canonicalRequest = \"\".concat(options.method, \"\\n\") + \"\".concat(options.canonicalUri, \"\\n\") + \"\".concat(options.canonicalQuerystring, \"\\n\") + \"\".concat(canonicalHeaders, \"\\n\") + \"\".concat(signedHeaders, \"\\n\") + \"\".concat(payloadHash);\n          credentialScope = \"\".concat(dateStamp, \"/\").concat(options.region, \"/\").concat(serviceName, \"/\").concat(AWS_REQUEST_TYPE); // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n          _context4.t0 = \"\".concat(AWS_ALGORITHM, \"\\n\") + \"\".concat(amzDate, \"\\n\") + \"\".concat(credentialScope, \"\\n\");\n          _context4.next = 22;\n          return options.crypto.sha256DigestHex(canonicalRequest);\n        case 22:\n          _context4.t1 = _context4.sent;\n          stringToSign = _context4.t0 + _context4.t1;\n          _context4.next = 26;\n          return getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\n        case 26:\n          signingKey = _context4.sent;\n          _context4.next = 29;\n          return sign(options.crypto, signingKey, stringToSign);\n        case 29:\n          signature = _context4.sent;\n          // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n          authorizationHeader = \"\".concat(AWS_ALGORITHM, \" Credential=\").concat(options.securityCredentials.accessKeyId, \"/\") + \"\".concat(credentialScope, \", SignedHeaders=\").concat(signedHeaders, \", \") + \"Signature=\".concat((0, crypto_1.fromArrayBufferToHex)(signature));\n          return _context4.abrupt(\"return\", {\n            // Do not return x-amz-date if date is available.\n            amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\n            authorizationHeader: authorizationHeader,\n            canonicalQuerystring: options.canonicalQuerystring\n          });\n        case 32:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _generateAuthenticationHeaderMap.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}