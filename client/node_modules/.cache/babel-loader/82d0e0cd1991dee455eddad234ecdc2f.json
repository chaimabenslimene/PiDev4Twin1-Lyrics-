{"ast":null,"code":"import _get from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _slicedToArray from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _toConsumableArray from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ASUS VivoBook\\\\Desktop\\\\PI - Copie\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { m as mergeProps, g as guid, i as isArraysEqual, T as Theme, a as mapHash, V as ViewContextType, C as ContentContainer, b as buildViewClassNames, c as greatestDurationDenominator, d as createDuration, B as BASE_OPTION_DEFAULTS, e as arrayToHash, f as filterHash, h as buildEventSourceRefiners, p as parseEventSource, j as formatWithOrdinals, u as unpromisify, k as buildRangeApiWithTimeZone, l as identity, r as requestJson, s as subtractDurations, n as intersectRanges, o as startOfDay, q as addDays, t as hashValuesToArray, v as buildEventApis, D as DelayedRunner, w as createFormatter, x as diffWholeDays, y as memoize, z as memoizeObjArg, A as isPropsEqual, E as Emitter, F as getInitialDate, G as rangeContainsMarker, H as createEmptyEventStore, I as reduceCurrentDate, J as reduceEventStore, K as rezoneEventStoreDates, L as mergeRawOptions, M as BASE_OPTION_REFINERS, N as CALENDAR_LISTENER_REFINERS, O as CALENDAR_OPTION_REFINERS, P as COMPLEX_OPTION_COMPARATORS, Q as VIEW_OPTION_REFINERS, R as DateEnv, S as DateProfileGenerator, U as createEventUi, W as parseBusinessHours, X as BaseComponent, Y as setRef, Z as Interaction, _ as getElSeg, $ as elementClosest, a0 as EventImpl, a1 as listenBySelector, a2 as listenToHoverBySelector, a3 as PureComponent, a4 as buildViewContext, a5 as getUniqueDomId, a6 as parseInteractionSettings, a7 as interactionSettingsStore, a8 as getNow, a9 as CalendarImpl, aa as flushSync, ab as CalendarRoot, ac as RenderId, ad as ensureElHasStyles, ae as applyStyleProp, af as sliceEventStore } from './internal-common.js';\nexport { ag as JsonRequestError } from './internal-common.js';\nimport { createElement, createRef, Fragment, render } from 'preact';\nimport 'preact/compat';\nvar globalLocales = [];\nvar MINIMAL_RAW_EN_LOCALE = {\n  code: 'en',\n  week: {\n    dow: 0,\n    doy: 4 // 4 days need to be within the year to be considered the first week\n  },\n\n  direction: 'ltr',\n  buttonText: {\n    prev: 'prev',\n    next: 'next',\n    prevYear: 'prev year',\n    nextYear: 'next year',\n    year: 'year',\n    today: 'today',\n    month: 'month',\n    week: 'week',\n    day: 'day',\n    list: 'list'\n  },\n  weekText: 'W',\n  weekTextLong: 'Week',\n  closeHint: 'Close',\n  timeHint: 'Time',\n  eventHint: 'Event',\n  allDayText: 'all-day',\n  moreLinkText: 'more',\n  noEventsText: 'No events to display'\n};\nvar RAW_EN_LOCALE = Object.assign(Object.assign({}, MINIMAL_RAW_EN_LOCALE), {\n  // Includes things we don't want other locales to inherit,\n  // things that derive from other translatable strings.\n  buttonHints: {\n    prev: 'Previous $0',\n    next: 'Next $0',\n    today: function today(buttonText, unit) {\n      return unit === 'day' ? 'Today' : \"This \".concat(buttonText);\n    }\n  },\n  viewHint: '$0 view',\n  navLinkHint: 'Go to $0',\n  moreLinkHint: function moreLinkHint(eventCnt) {\n    return \"Show \".concat(eventCnt, \" more event\").concat(eventCnt === 1 ? '' : 's');\n  }\n});\nfunction organizeRawLocales(explicitRawLocales) {\n  var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';\n  var allRawLocales = globalLocales.concat(explicitRawLocales);\n  var rawLocaleMap = {\n    en: RAW_EN_LOCALE\n  };\n  var _iterator = _createForOfIteratorHelper(allRawLocales),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var rawLocale = _step.value;\n      rawLocaleMap[rawLocale.code] = rawLocale;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    map: rawLocaleMap,\n    defaultCode: defaultCode\n  };\n}\nfunction buildLocale(inputSingular, available) {\n  if (typeof inputSingular === 'object' && !Array.isArray(inputSingular)) {\n    return parseLocale(inputSingular.code, [inputSingular.code], inputSingular);\n  }\n  return queryLocale(inputSingular, available);\n}\nfunction queryLocale(codeArg, available) {\n  var codes = [].concat(codeArg || []); // will convert to array\n  var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;\n  return parseLocale(codeArg, codes, raw);\n}\nfunction queryRawLocale(codes, available) {\n  for (var i = 0; i < codes.length; i += 1) {\n    var parts = codes[i].toLocaleLowerCase().split('-');\n    for (var j = parts.length; j > 0; j -= 1) {\n      var simpleId = parts.slice(0, j).join('-');\n      if (available[simpleId]) {\n        return available[simpleId];\n      }\n    }\n  }\n  return null;\n}\nfunction parseLocale(codeArg, codes, raw) {\n  var merged = mergeProps([MINIMAL_RAW_EN_LOCALE, raw], ['buttonText']);\n  delete merged.code; // don't want this part of the options\n  var week = merged.week;\n  delete merged.week;\n  return {\n    codeArg: codeArg,\n    codes: codes,\n    week: week,\n    simpleNumberFormat: new Intl.NumberFormat(codeArg),\n    options: merged\n  };\n}\n\n// TODO: easier way to add new hooks? need to update a million things\nfunction createPlugin(input) {\n  return {\n    id: guid(),\n    name: input.name,\n    premiumReleaseDate: input.premiumReleaseDate ? new Date(input.premiumReleaseDate) : undefined,\n    deps: input.deps || [],\n    reducers: input.reducers || [],\n    isLoadingFuncs: input.isLoadingFuncs || [],\n    contextInit: [].concat(input.contextInit || []),\n    eventRefiners: input.eventRefiners || {},\n    eventDefMemberAdders: input.eventDefMemberAdders || [],\n    eventSourceRefiners: input.eventSourceRefiners || {},\n    isDraggableTransformers: input.isDraggableTransformers || [],\n    eventDragMutationMassagers: input.eventDragMutationMassagers || [],\n    eventDefMutationAppliers: input.eventDefMutationAppliers || [],\n    dateSelectionTransformers: input.dateSelectionTransformers || [],\n    datePointTransforms: input.datePointTransforms || [],\n    dateSpanTransforms: input.dateSpanTransforms || [],\n    views: input.views || {},\n    viewPropsTransformers: input.viewPropsTransformers || [],\n    isPropsValid: input.isPropsValid || null,\n    externalDefTransforms: input.externalDefTransforms || [],\n    viewContainerAppends: input.viewContainerAppends || [],\n    eventDropTransformers: input.eventDropTransformers || [],\n    componentInteractions: input.componentInteractions || [],\n    calendarInteractions: input.calendarInteractions || [],\n    themeClasses: input.themeClasses || {},\n    eventSourceDefs: input.eventSourceDefs || [],\n    cmdFormatter: input.cmdFormatter,\n    recurringTypes: input.recurringTypes || [],\n    namedTimeZonedImpl: input.namedTimeZonedImpl,\n    initialView: input.initialView || '',\n    elementDraggingImpl: input.elementDraggingImpl,\n    optionChangeHandlers: input.optionChangeHandlers || {},\n    scrollGridImpl: input.scrollGridImpl || null,\n    listenerRefiners: input.listenerRefiners || {},\n    optionRefiners: input.optionRefiners || {},\n    propSetHandlers: input.propSetHandlers || {}\n  };\n}\nfunction buildPluginHooks(pluginDefs, globalDefs) {\n  var currentPluginIds = {};\n  var hooks = {\n    premiumReleaseDate: undefined,\n    reducers: [],\n    isLoadingFuncs: [],\n    contextInit: [],\n    eventRefiners: {},\n    eventDefMemberAdders: [],\n    eventSourceRefiners: {},\n    isDraggableTransformers: [],\n    eventDragMutationMassagers: [],\n    eventDefMutationAppliers: [],\n    dateSelectionTransformers: [],\n    datePointTransforms: [],\n    dateSpanTransforms: [],\n    views: {},\n    viewPropsTransformers: [],\n    isPropsValid: null,\n    externalDefTransforms: [],\n    viewContainerAppends: [],\n    eventDropTransformers: [],\n    componentInteractions: [],\n    calendarInteractions: [],\n    themeClasses: {},\n    eventSourceDefs: [],\n    cmdFormatter: null,\n    recurringTypes: [],\n    namedTimeZonedImpl: null,\n    initialView: '',\n    elementDraggingImpl: null,\n    optionChangeHandlers: {},\n    scrollGridImpl: null,\n    listenerRefiners: {},\n    optionRefiners: {},\n    propSetHandlers: {}\n  };\n  function addDefs(defs) {\n    var _iterator2 = _createForOfIteratorHelper(defs),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var def = _step2.value;\n        var pluginName = def.name;\n        var currentId = currentPluginIds[pluginName];\n        if (currentId === undefined) {\n          currentPluginIds[pluginName] = def.id;\n          addDefs(def.deps);\n          hooks = combineHooks(hooks, def);\n        } else if (currentId !== def.id) {\n          // different ID than the one already added\n          console.warn(\"Duplicate plugin '\".concat(pluginName, \"'\"));\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  if (pluginDefs) {\n    addDefs(pluginDefs);\n  }\n  addDefs(globalDefs);\n  return hooks;\n}\nfunction buildBuildPluginHooks() {\n  var currentOverrideDefs = [];\n  var currentGlobalDefs = [];\n  var currentHooks;\n  return function (overrideDefs, globalDefs) {\n    if (!currentHooks || !isArraysEqual(overrideDefs, currentOverrideDefs) || !isArraysEqual(globalDefs, currentGlobalDefs)) {\n      currentHooks = buildPluginHooks(overrideDefs, globalDefs);\n    }\n    currentOverrideDefs = overrideDefs;\n    currentGlobalDefs = globalDefs;\n    return currentHooks;\n  };\n}\nfunction combineHooks(hooks0, hooks1) {\n  return {\n    premiumReleaseDate: compareOptionalDates(hooks0.premiumReleaseDate, hooks1.premiumReleaseDate),\n    reducers: hooks0.reducers.concat(hooks1.reducers),\n    isLoadingFuncs: hooks0.isLoadingFuncs.concat(hooks1.isLoadingFuncs),\n    contextInit: hooks0.contextInit.concat(hooks1.contextInit),\n    eventRefiners: Object.assign(Object.assign({}, hooks0.eventRefiners), hooks1.eventRefiners),\n    eventDefMemberAdders: hooks0.eventDefMemberAdders.concat(hooks1.eventDefMemberAdders),\n    eventSourceRefiners: Object.assign(Object.assign({}, hooks0.eventSourceRefiners), hooks1.eventSourceRefiners),\n    isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),\n    eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),\n    eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),\n    dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),\n    datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),\n    dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),\n    views: Object.assign(Object.assign({}, hooks0.views), hooks1.views),\n    viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),\n    isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,\n    externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),\n    viewContainerAppends: hooks0.viewContainerAppends.concat(hooks1.viewContainerAppends),\n    eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),\n    calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),\n    componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),\n    themeClasses: Object.assign(Object.assign({}, hooks0.themeClasses), hooks1.themeClasses),\n    eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),\n    cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,\n    recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),\n    namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,\n    initialView: hooks0.initialView || hooks1.initialView,\n    elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,\n    optionChangeHandlers: Object.assign(Object.assign({}, hooks0.optionChangeHandlers), hooks1.optionChangeHandlers),\n    scrollGridImpl: hooks1.scrollGridImpl || hooks0.scrollGridImpl,\n    listenerRefiners: Object.assign(Object.assign({}, hooks0.listenerRefiners), hooks1.listenerRefiners),\n    optionRefiners: Object.assign(Object.assign({}, hooks0.optionRefiners), hooks1.optionRefiners),\n    propSetHandlers: Object.assign(Object.assign({}, hooks0.propSetHandlers), hooks1.propSetHandlers)\n  };\n}\nfunction compareOptionalDates(date0, date1) {\n  if (date0 === undefined) {\n    return date1;\n  }\n  if (date1 === undefined) {\n    return date0;\n  }\n  return new Date(Math.max(date0.valueOf(), date1.valueOf()));\n}\nvar StandardTheme = /*#__PURE__*/function (_Theme) {\n  _inherits(StandardTheme, _Theme);\n  function StandardTheme() {\n    _classCallCheck(this, StandardTheme);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StandardTheme).apply(this, arguments));\n  }\n  return StandardTheme;\n}(Theme);\nStandardTheme.prototype.classes = {\n  root: 'fc-theme-standard',\n  tableCellShaded: 'fc-cell-shaded',\n  buttonGroup: 'fc-button-group',\n  button: 'fc-button fc-button-primary',\n  buttonActive: 'fc-button-active'\n};\nStandardTheme.prototype.baseIconClass = 'fc-icon';\nStandardTheme.prototype.iconClasses = {\n  close: 'fc-icon-x',\n  prev: 'fc-icon-chevron-left',\n  next: 'fc-icon-chevron-right',\n  prevYear: 'fc-icon-chevrons-left',\n  nextYear: 'fc-icon-chevrons-right'\n};\nStandardTheme.prototype.rtlIconClasses = {\n  prev: 'fc-icon-chevron-right',\n  next: 'fc-icon-chevron-left',\n  prevYear: 'fc-icon-chevrons-right',\n  nextYear: 'fc-icon-chevrons-left'\n};\nStandardTheme.prototype.iconOverrideOption = 'buttonIcons'; // TODO: make TS-friendly\nStandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';\nStandardTheme.prototype.iconOverridePrefix = 'fc-icon-';\nfunction compileViewDefs(defaultConfigs, overrideConfigs) {\n  var hash = {};\n  var viewType;\n  for (viewType in defaultConfigs) {\n    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n  }\n  for (viewType in overrideConfigs) {\n    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n  }\n  return hash;\n}\nfunction ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n  if (hash[viewType]) {\n    return hash[viewType];\n  }\n  var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n  if (viewDef) {\n    hash[viewType] = viewDef;\n  }\n  return viewDef;\n}\nfunction buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n  var defaultConfig = defaultConfigs[viewType];\n  var overrideConfig = overrideConfigs[viewType];\n  var queryProp = function queryProp(name) {\n    return defaultConfig && defaultConfig[name] !== null ? defaultConfig[name] : overrideConfig && overrideConfig[name] !== null ? overrideConfig[name] : null;\n  };\n  var theComponent = queryProp('component');\n  var superType = queryProp('superType');\n  var superDef = null;\n  if (superType) {\n    if (superType === viewType) {\n      throw new Error('Can\\'t have a custom view type that references itself');\n    }\n    superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);\n  }\n  if (!theComponent && superDef) {\n    theComponent = superDef.component;\n  }\n  if (!theComponent) {\n    return null; // don't throw a warning, might be settings for a single-unit view\n  }\n\n  return {\n    type: viewType,\n    component: theComponent,\n    defaults: Object.assign(Object.assign({}, superDef ? superDef.defaults : {}), defaultConfig ? defaultConfig.rawOptions : {}),\n    overrides: Object.assign(Object.assign({}, superDef ? superDef.overrides : {}), overrideConfig ? overrideConfig.rawOptions : {})\n  };\n}\nfunction parseViewConfigs(inputs) {\n  return mapHash(inputs, parseViewConfig);\n}\nfunction parseViewConfig(input) {\n  var rawOptions = typeof input === 'function' ? {\n    component: input\n  } : input;\n  var component = rawOptions.component;\n  if (rawOptions.content) {\n    component = createViewHookComponent(rawOptions);\n    // TODO: remove content/classNames/didMount/etc from options?\n  }\n\n  return {\n    superType: rawOptions.type,\n    component: component,\n    rawOptions: rawOptions // includes type and component too :(\n  };\n}\n\nfunction createViewHookComponent(options) {\n  return function (viewProps) {\n    return createElement(ViewContextType.Consumer, null, function (context) {\n      return createElement(ContentContainer, {\n        elTag: \"div\",\n        elClasses: buildViewClassNames(context.viewSpec),\n        renderProps: Object.assign(Object.assign({}, viewProps), {\n          nextDayThreshold: context.options.nextDayThreshold\n        }),\n        generatorName: undefined,\n        customGenerator: options.content,\n        classNameGenerator: options.classNames,\n        didMount: options.didMount,\n        willUnmount: options.willUnmount\n      });\n    });\n  };\n}\nfunction buildViewSpecs(defaultInputs, optionOverrides, dynamicOptionOverrides, localeDefaults) {\n  var defaultConfigs = parseViewConfigs(defaultInputs);\n  var overrideConfigs = parseViewConfigs(optionOverrides.views);\n  var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);\n  return mapHash(viewDefs, function (viewDef) {\n    return buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults);\n  });\n}\nfunction buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults) {\n  var durationInput = viewDef.overrides.duration || viewDef.defaults.duration || dynamicOptionOverrides.duration || optionOverrides.duration;\n  var duration = null;\n  var durationUnit = '';\n  var singleUnit = '';\n  var singleUnitOverrides = {};\n  if (durationInput) {\n    duration = createDurationCached(durationInput);\n    if (duration) {\n      // valid?\n      var denom = greatestDurationDenominator(duration);\n      durationUnit = denom.unit;\n      if (denom.value === 1) {\n        singleUnit = durationUnit;\n        singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].rawOptions : {};\n      }\n    }\n  }\n  var queryButtonText = function queryButtonText(optionsSubset) {\n    var buttonTextMap = optionsSubset.buttonText || {};\n    var buttonTextKey = viewDef.defaults.buttonTextKey;\n    if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {\n      return buttonTextMap[buttonTextKey];\n    }\n    if (buttonTextMap[viewDef.type] != null) {\n      return buttonTextMap[viewDef.type];\n    }\n    if (buttonTextMap[singleUnit] != null) {\n      return buttonTextMap[singleUnit];\n    }\n    return null;\n  };\n  var queryButtonTitle = function queryButtonTitle(optionsSubset) {\n    var buttonHints = optionsSubset.buttonHints || {};\n    var buttonKey = viewDef.defaults.buttonTextKey; // use same key as text\n    if (buttonKey != null && buttonHints[buttonKey] != null) {\n      return buttonHints[buttonKey];\n    }\n    if (buttonHints[viewDef.type] != null) {\n      return buttonHints[viewDef.type];\n    }\n    if (buttonHints[singleUnit] != null) {\n      return buttonHints[singleUnit];\n    }\n    return null;\n  };\n  return {\n    type: viewDef.type,\n    component: viewDef.component,\n    duration: duration,\n    durationUnit: durationUnit,\n    singleUnit: singleUnit,\n    optionDefaults: viewDef.defaults,\n    optionOverrides: Object.assign(Object.assign({}, singleUnitOverrides), viewDef.overrides),\n    buttonTextOverride: queryButtonText(dynamicOptionOverrides) || queryButtonText(optionOverrides) ||\n    // constructor-specified buttonText lookup hash takes precedence\n    viewDef.overrides.buttonText,\n    buttonTextDefault: queryButtonText(localeDefaults) || viewDef.defaults.buttonText || queryButtonText(BASE_OPTION_DEFAULTS) || viewDef.type,\n    // not DRY\n    buttonTitleOverride: queryButtonTitle(dynamicOptionOverrides) || queryButtonTitle(optionOverrides) || viewDef.overrides.buttonHint,\n    buttonTitleDefault: queryButtonTitle(localeDefaults) || viewDef.defaults.buttonHint || queryButtonTitle(BASE_OPTION_DEFAULTS)\n    // will eventually fall back to buttonText\n  };\n}\n// hack to get memoization working\nvar durationInputMap = {};\nfunction createDurationCached(durationInput) {\n  var json = JSON.stringify(durationInput);\n  var res = durationInputMap[json];\n  if (res === undefined) {\n    res = createDuration(durationInput);\n    durationInputMap[json] = res;\n  }\n  return res;\n}\nfunction reduceViewType(viewType, action) {\n  switch (action.type) {\n    case 'CHANGE_VIEW_TYPE':\n      viewType = action.viewType;\n  }\n  return viewType;\n}\nfunction reduceDynamicOptionOverrides(dynamicOptionOverrides, action) {\n  switch (action.type) {\n    case 'SET_OPTION':\n      return Object.assign(Object.assign({}, dynamicOptionOverrides), _defineProperty({}, action.optionName, action.rawOptionValue));\n    default:\n      return dynamicOptionOverrides;\n  }\n}\nfunction reduceDateProfile(currentDateProfile, action, currentDate, dateProfileGenerator) {\n  var dp;\n  switch (action.type) {\n    case 'CHANGE_VIEW_TYPE':\n      return dateProfileGenerator.build(action.dateMarker || currentDate);\n    case 'CHANGE_DATE':\n      return dateProfileGenerator.build(action.dateMarker);\n    case 'PREV':\n      dp = dateProfileGenerator.buildPrev(currentDateProfile, currentDate);\n      if (dp.isValid) {\n        return dp;\n      }\n      break;\n    case 'NEXT':\n      dp = dateProfileGenerator.buildNext(currentDateProfile, currentDate);\n      if (dp.isValid) {\n        return dp;\n      }\n      break;\n  }\n  return currentDateProfile;\n}\nfunction initEventSources(calendarOptions, dateProfile, context) {\n  var activeRange = dateProfile ? dateProfile.activeRange : null;\n  return addSources({}, parseInitialSources(calendarOptions, context), activeRange, context);\n}\nfunction reduceEventSources(eventSources, action, dateProfile, context) {\n  var activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?\n  switch (action.type) {\n    case 'ADD_EVENT_SOURCES':\n      // already parsed\n      return addSources(eventSources, action.sources, activeRange, context);\n    case 'REMOVE_EVENT_SOURCE':\n      return removeSource(eventSources, action.sourceId);\n    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(\n    case 'NEXT':\n    case 'CHANGE_DATE':\n    case 'CHANGE_VIEW_TYPE':\n      if (dateProfile) {\n        return fetchDirtySources(eventSources, activeRange, context);\n      }\n      return eventSources;\n    case 'FETCH_EVENT_SOURCES':\n      return fetchSourcesByIds(eventSources, action.sourceIds ?\n      // why no type?\n      arrayToHash(action.sourceIds) : excludeStaticSources(eventSources, context), activeRange, action.isRefetch || false, context);\n    case 'RECEIVE_EVENTS':\n    case 'RECEIVE_EVENT_ERROR':\n      return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);\n    case 'REMOVE_ALL_EVENT_SOURCES':\n      return {};\n    default:\n      return eventSources;\n  }\n}\nfunction reduceEventSourcesNewTimeZone(eventSources, dateProfile, context) {\n  var activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?\n  return fetchSourcesByIds(eventSources, excludeStaticSources(eventSources, context), activeRange, true, context);\n}\nfunction computeEventSourcesLoading(eventSources) {\n  for (var sourceId in eventSources) {\n    if (eventSources[sourceId].isFetching) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction addSources(eventSourceHash, sources, fetchRange, context) {\n  var hash = {};\n  var _iterator3 = _createForOfIteratorHelper(sources),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var source = _step3.value;\n      hash[source.sourceId] = source;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  if (fetchRange) {\n    hash = fetchDirtySources(hash, fetchRange, context);\n  }\n  return Object.assign(Object.assign({}, eventSourceHash), hash);\n}\nfunction removeSource(eventSourceHash, sourceId) {\n  return filterHash(eventSourceHash, function (eventSource) {\n    return eventSource.sourceId !== sourceId;\n  });\n}\nfunction fetchDirtySources(sourceHash, fetchRange, context) {\n  return fetchSourcesByIds(sourceHash, filterHash(sourceHash, function (eventSource) {\n    return isSourceDirty(eventSource, fetchRange, context);\n  }), fetchRange, false, context);\n}\nfunction isSourceDirty(eventSource, fetchRange, context) {\n  if (!doesSourceNeedRange(eventSource, context)) {\n    return !eventSource.latestFetchId;\n  }\n  return !context.options.lazyFetching || !eventSource.fetchRange || eventSource.isFetching ||\n  // always cancel outdated in-progress fetches\n  fetchRange.start < eventSource.fetchRange.start || fetchRange.end > eventSource.fetchRange.end;\n}\nfunction fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, isRefetch, context) {\n  var nextSources = {};\n  for (var sourceId in prevSources) {\n    var source = prevSources[sourceId];\n    if (sourceIdHash[sourceId]) {\n      nextSources[sourceId] = fetchSource(source, fetchRange, isRefetch, context);\n    } else {\n      nextSources[sourceId] = source;\n    }\n  }\n  return nextSources;\n}\nfunction fetchSource(eventSource, fetchRange, isRefetch, context) {\n  var options = context.options,\n    calendarApi = context.calendarApi;\n  var sourceDef = context.pluginHooks.eventSourceDefs[eventSource.sourceDefId];\n  var fetchId = guid();\n  sourceDef.fetch({\n    eventSource: eventSource,\n    range: fetchRange,\n    isRefetch: isRefetch,\n    context: context\n  }, function (res) {\n    var rawEvents = res.rawEvents;\n    if (options.eventSourceSuccess) {\n      rawEvents = options.eventSourceSuccess.call(calendarApi, rawEvents, res.response) || rawEvents;\n    }\n    if (eventSource.success) {\n      rawEvents = eventSource.success.call(calendarApi, rawEvents, res.response) || rawEvents;\n    }\n    context.dispatch({\n      type: 'RECEIVE_EVENTS',\n      sourceId: eventSource.sourceId,\n      fetchId: fetchId,\n      fetchRange: fetchRange,\n      rawEvents: rawEvents\n    });\n  }, function (error) {\n    var errorHandled = false;\n    if (options.eventSourceFailure) {\n      options.eventSourceFailure.call(calendarApi, error);\n      errorHandled = true;\n    }\n    if (eventSource.failure) {\n      eventSource.failure(error);\n      errorHandled = true;\n    }\n    if (!errorHandled) {\n      console.warn(error.message, error);\n    }\n    context.dispatch({\n      type: 'RECEIVE_EVENT_ERROR',\n      sourceId: eventSource.sourceId,\n      fetchId: fetchId,\n      fetchRange: fetchRange,\n      error: error\n    });\n  });\n  return Object.assign(Object.assign({}, eventSource), {\n    isFetching: true,\n    latestFetchId: fetchId\n  });\n}\nfunction receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {\n  var eventSource = sourceHash[sourceId];\n  if (eventSource &&\n  // not already removed\n  fetchId === eventSource.latestFetchId) {\n    return Object.assign(Object.assign({}, sourceHash), _defineProperty({}, sourceId, Object.assign(Object.assign({}, eventSource), {\n      isFetching: false,\n      fetchRange: fetchRange\n    })));\n  }\n  return sourceHash;\n}\nfunction excludeStaticSources(eventSources, context) {\n  return filterHash(eventSources, function (eventSource) {\n    return doesSourceNeedRange(eventSource, context);\n  });\n}\nfunction parseInitialSources(rawOptions, context) {\n  var refiners = buildEventSourceRefiners(context);\n  var rawSources = [].concat(rawOptions.eventSources || []);\n  var sources = []; // parsed\n  if (rawOptions.initialEvents) {\n    rawSources.unshift(rawOptions.initialEvents);\n  }\n  if (rawOptions.events) {\n    rawSources.unshift(rawOptions.events);\n  }\n  var _iterator4 = _createForOfIteratorHelper(rawSources),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var rawSource = _step4.value;\n      var source = parseEventSource(rawSource, context, refiners);\n      if (source) {\n        sources.push(source);\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return sources;\n}\nfunction doesSourceNeedRange(eventSource, context) {\n  var defs = context.pluginHooks.eventSourceDefs;\n  return !defs[eventSource.sourceDefId].ignoreRange;\n}\nfunction reduceDateSelection(currentSelection, action) {\n  switch (action.type) {\n    case 'UNSELECT_DATES':\n      return null;\n    case 'SELECT_DATES':\n      return action.selection;\n    default:\n      return currentSelection;\n  }\n}\nfunction reduceSelectedEvent(currentInstanceId, action) {\n  switch (action.type) {\n    case 'UNSELECT_EVENT':\n      return '';\n    case 'SELECT_EVENT':\n      return action.eventInstanceId;\n    default:\n      return currentInstanceId;\n  }\n}\nfunction reduceEventDrag(currentDrag, action) {\n  var newDrag;\n  switch (action.type) {\n    case 'UNSET_EVENT_DRAG':\n      return null;\n    case 'SET_EVENT_DRAG':\n      newDrag = action.state;\n      return {\n        affectedEvents: newDrag.affectedEvents,\n        mutatedEvents: newDrag.mutatedEvents,\n        isEvent: newDrag.isEvent\n      };\n    default:\n      return currentDrag;\n  }\n}\nfunction reduceEventResize(currentResize, action) {\n  var newResize;\n  switch (action.type) {\n    case 'UNSET_EVENT_RESIZE':\n      return null;\n    case 'SET_EVENT_RESIZE':\n      newResize = action.state;\n      return {\n        affectedEvents: newResize.affectedEvents,\n        mutatedEvents: newResize.mutatedEvents,\n        isEvent: newResize.isEvent\n      };\n    default:\n      return currentResize;\n  }\n}\nfunction parseToolbars(calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {\n  var header = calendarOptions.headerToolbar ? parseToolbar(calendarOptions.headerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;\n  var footer = calendarOptions.footerToolbar ? parseToolbar(calendarOptions.footerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;\n  return {\n    header: header,\n    footer: footer\n  };\n}\nfunction parseToolbar(sectionStrHash, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {\n  var sectionWidgets = {};\n  var viewsWithButtons = [];\n  var hasTitle = false;\n  for (var sectionName in sectionStrHash) {\n    var sectionStr = sectionStrHash[sectionName];\n    var sectionRes = parseSection(sectionStr, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi);\n    sectionWidgets[sectionName] = sectionRes.widgets;\n    viewsWithButtons.push.apply(viewsWithButtons, _toConsumableArray(sectionRes.viewsWithButtons));\n    hasTitle = hasTitle || sectionRes.hasTitle;\n  }\n  return {\n    sectionWidgets: sectionWidgets,\n    viewsWithButtons: viewsWithButtons,\n    hasTitle: hasTitle\n  };\n}\n/*\nBAD: querying icons and text here. should be done at render time\n*/\nfunction parseSection(sectionStr, calendarOptions,\n// defaults+overrides, then refined\ncalendarOptionOverrides,\n// overrides only!, unrefined :(\ntheme, viewSpecs, calendarApi) {\n  var isRtl = calendarOptions.direction === 'rtl';\n  var calendarCustomButtons = calendarOptions.customButtons || {};\n  var calendarButtonTextOverrides = calendarOptionOverrides.buttonText || {};\n  var calendarButtonText = calendarOptions.buttonText || {};\n  var calendarButtonHintOverrides = calendarOptionOverrides.buttonHints || {};\n  var calendarButtonHints = calendarOptions.buttonHints || {};\n  var sectionSubstrs = sectionStr ? sectionStr.split(' ') : [];\n  var viewsWithButtons = [];\n  var hasTitle = false;\n  var widgets = sectionSubstrs.map(function (buttonGroupStr) {\n    return buttonGroupStr.split(',').map(function (buttonName) {\n      if (buttonName === 'title') {\n        hasTitle = true;\n        return {\n          buttonName: buttonName\n        };\n      }\n      var customButtonProps;\n      var viewSpec;\n      var buttonClick;\n      var buttonIcon; // only one of these will be set\n      var buttonText; // \"\n      var buttonHint;\n      // ^ for the title=\"\" attribute, for accessibility\n      if (customButtonProps = calendarCustomButtons[buttonName]) {\n        buttonClick = function buttonClick(ev) {\n          if (customButtonProps.click) {\n            customButtonProps.click.call(ev.target, ev, ev.target); // TODO: use Calendar this context?\n          }\n        };\n\n        (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = customButtonProps.text);\n        buttonHint = customButtonProps.hint || customButtonProps.text;\n      } else if (viewSpec = viewSpecs[buttonName]) {\n        viewsWithButtons.push(buttonName);\n        buttonClick = function buttonClick() {\n          calendarApi.changeView(buttonName);\n        };\n        (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = viewSpec.buttonTextDefault);\n        var textFallback = viewSpec.buttonTextOverride || viewSpec.buttonTextDefault;\n        buttonHint = formatWithOrdinals(viewSpec.buttonTitleOverride || viewSpec.buttonTitleDefault || calendarOptions.viewHint, [textFallback, buttonName],\n        // view-name = buttonName\n        textFallback);\n      } else if (calendarApi[buttonName]) {\n        // a calendarApi method\n        buttonClick = function buttonClick() {\n          calendarApi[buttonName]();\n        };\n        (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = calendarButtonText[buttonName]); // everything else is considered default\n        if (buttonName === 'prevYear' || buttonName === 'nextYear') {\n          var prevOrNext = buttonName === 'prevYear' ? 'prev' : 'next';\n          buttonHint = formatWithOrdinals(calendarButtonHintOverrides[prevOrNext] || calendarButtonHints[prevOrNext], [calendarButtonText.year || 'year', 'year'], calendarButtonText[buttonName]);\n        } else {\n          buttonHint = function buttonHint(navUnit) {\n            return formatWithOrdinals(calendarButtonHintOverrides[buttonName] || calendarButtonHints[buttonName], [calendarButtonText[navUnit] || navUnit, navUnit], calendarButtonText[buttonName]);\n          };\n        }\n      }\n      return {\n        buttonName: buttonName,\n        buttonClick: buttonClick,\n        buttonIcon: buttonIcon,\n        buttonText: buttonText,\n        buttonHint: buttonHint\n      };\n    });\n  });\n  return {\n    widgets: widgets,\n    viewsWithButtons: viewsWithButtons,\n    hasTitle: hasTitle\n  };\n}\n\n// always represents the current view. otherwise, it'd need to change value every time date changes\nvar ViewImpl = /*#__PURE__*/function () {\n  function ViewImpl(type, getCurrentData, dateEnv) {\n    _classCallCheck(this, ViewImpl);\n    this.type = type;\n    this.getCurrentData = getCurrentData;\n    this.dateEnv = dateEnv;\n  }\n  _createClass(ViewImpl, [{\n    key: \"getOption\",\n    value: function getOption(name) {\n      return this.getCurrentData().options[name]; // are the view-specific options\n    }\n  }, {\n    key: \"calendar\",\n    get: function get() {\n      return this.getCurrentData().calendarApi;\n    }\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this.getCurrentData().viewTitle;\n    }\n  }, {\n    key: \"activeStart\",\n    get: function get() {\n      return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.start);\n    }\n  }, {\n    key: \"activeEnd\",\n    get: function get() {\n      return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.end);\n    }\n  }, {\n    key: \"currentStart\",\n    get: function get() {\n      return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.start);\n    }\n  }, {\n    key: \"currentEnd\",\n    get: function get() {\n      return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.end);\n    }\n  }]);\n  return ViewImpl;\n}();\nvar eventSourceDef$2 = {\n  ignoreRange: true,\n  parseMeta: function parseMeta(refined) {\n    if (Array.isArray(refined.events)) {\n      return refined.events;\n    }\n    return null;\n  },\n  fetch: function fetch(arg, successCallback) {\n    successCallback({\n      rawEvents: arg.eventSource.meta\n    });\n  }\n};\nvar arrayEventSourcePlugin = createPlugin({\n  name: 'array-event-source',\n  eventSourceDefs: [eventSourceDef$2]\n});\nvar eventSourceDef$1 = {\n  parseMeta: function parseMeta(refined) {\n    if (typeof refined.events === 'function') {\n      return refined.events;\n    }\n    return null;\n  },\n  fetch: function fetch(arg, successCallback, errorCallback) {\n    var dateEnv = arg.context.dateEnv;\n    var func = arg.eventSource.meta;\n    unpromisify(func.bind(null, buildRangeApiWithTimeZone(arg.range, dateEnv)), function (rawEvents) {\n      return successCallback({\n        rawEvents: rawEvents\n      });\n    }, errorCallback);\n  }\n};\nvar funcEventSourcePlugin = createPlugin({\n  name: 'func-event-source',\n  eventSourceDefs: [eventSourceDef$1]\n});\nvar JSON_FEED_EVENT_SOURCE_REFINERS = {\n  method: String,\n  extraParams: identity,\n  startParam: String,\n  endParam: String,\n  timeZoneParam: String\n};\nvar eventSourceDef = {\n  parseMeta: function parseMeta(refined) {\n    if (refined.url && (refined.format === 'json' || !refined.format)) {\n      return {\n        url: refined.url,\n        format: 'json',\n        method: (refined.method || 'GET').toUpperCase(),\n        extraParams: refined.extraParams,\n        startParam: refined.startParam,\n        endParam: refined.endParam,\n        timeZoneParam: refined.timeZoneParam\n      };\n    }\n    return null;\n  },\n  fetch: function fetch(arg, successCallback, errorCallback) {\n    var meta = arg.eventSource.meta;\n    var requestParams = buildRequestParams(meta, arg.range, arg.context);\n    requestJson(meta.method, meta.url, requestParams).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        rawEvents = _ref2[0],\n        response = _ref2[1];\n      successCallback({\n        rawEvents: rawEvents,\n        response: response\n      });\n    }, errorCallback);\n  }\n};\nvar jsonFeedEventSourcePlugin = createPlugin({\n  name: 'json-event-source',\n  eventSourceRefiners: JSON_FEED_EVENT_SOURCE_REFINERS,\n  eventSourceDefs: [eventSourceDef]\n});\nfunction buildRequestParams(meta, range, context) {\n  var dateEnv = context.dateEnv,\n    options = context.options;\n  var startParam;\n  var endParam;\n  var timeZoneParam;\n  var customRequestParams;\n  var params = {};\n  startParam = meta.startParam;\n  if (startParam == null) {\n    startParam = options.startParam;\n  }\n  endParam = meta.endParam;\n  if (endParam == null) {\n    endParam = options.endParam;\n  }\n  timeZoneParam = meta.timeZoneParam;\n  if (timeZoneParam == null) {\n    timeZoneParam = options.timeZoneParam;\n  }\n  // retrieve any outbound GET/POST data from the options\n  if (typeof meta.extraParams === 'function') {\n    // supplied as a function that returns a key/value object\n    customRequestParams = meta.extraParams();\n  } else {\n    // probably supplied as a straight key/value object\n    customRequestParams = meta.extraParams || {};\n  }\n  Object.assign(params, customRequestParams);\n  params[startParam] = dateEnv.formatIso(range.start);\n  params[endParam] = dateEnv.formatIso(range.end);\n  if (dateEnv.timeZone !== 'local') {\n    params[timeZoneParam] = dateEnv.timeZone;\n  }\n  return params;\n}\nvar SIMPLE_RECURRING_REFINERS = {\n  daysOfWeek: identity,\n  startTime: createDuration,\n  endTime: createDuration,\n  duration: createDuration,\n  startRecur: identity,\n  endRecur: identity\n};\nvar recurring = {\n  parse: function parse(refined, dateEnv) {\n    if (refined.daysOfWeek || refined.startTime || refined.endTime || refined.startRecur || refined.endRecur) {\n      var recurringData = {\n        daysOfWeek: refined.daysOfWeek || null,\n        startTime: refined.startTime || null,\n        endTime: refined.endTime || null,\n        startRecur: refined.startRecur ? dateEnv.createMarker(refined.startRecur) : null,\n        endRecur: refined.endRecur ? dateEnv.createMarker(refined.endRecur) : null\n      };\n      var duration;\n      if (refined.duration) {\n        duration = refined.duration;\n      }\n      if (!duration && refined.startTime && refined.endTime) {\n        duration = subtractDurations(refined.endTime, refined.startTime);\n      }\n      return {\n        allDayGuess: Boolean(!refined.startTime && !refined.endTime),\n        duration: duration,\n        typeData: recurringData // doesn't need endTime anymore but oh well\n      };\n    }\n\n    return null;\n  },\n  expand: function expand(typeData, framingRange, dateEnv) {\n    var clippedFramingRange = intersectRanges(framingRange, {\n      start: typeData.startRecur,\n      end: typeData.endRecur\n    });\n    if (clippedFramingRange) {\n      return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);\n    }\n    return [];\n  }\n};\nvar simpleRecurringEventsPlugin = createPlugin({\n  name: 'simple-recurring-event',\n  recurringTypes: [recurring],\n  eventRefiners: SIMPLE_RECURRING_REFINERS\n});\nfunction expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {\n  var dowHash = daysOfWeek ? arrayToHash(daysOfWeek) : null;\n  var dayMarker = startOfDay(framingRange.start);\n  var endMarker = framingRange.end;\n  var instanceStarts = [];\n  while (dayMarker < endMarker) {\n    var instanceStart = void 0;\n    // if everyday, or this particular day-of-week\n    if (!dowHash || dowHash[dayMarker.getUTCDay()]) {\n      if (startTime) {\n        instanceStart = dateEnv.add(dayMarker, startTime);\n      } else {\n        instanceStart = dayMarker;\n      }\n      instanceStarts.push(instanceStart);\n    }\n    dayMarker = addDays(dayMarker, 1);\n  }\n  return instanceStarts;\n}\nvar changeHandlerPlugin = createPlugin({\n  name: 'change-handler',\n  optionChangeHandlers: {\n    events: function events(_events, context) {\n      handleEventSources([_events], context);\n    },\n    eventSources: handleEventSources\n  }\n});\n/*\nBUG: if `event` was supplied, all previously-given `eventSources` will be wiped out\n*/\nfunction handleEventSources(inputs, context) {\n  var unfoundSources = hashValuesToArray(context.getCurrentData().eventSources);\n  if (unfoundSources.length === 1 && inputs.length === 1 && Array.isArray(unfoundSources[0]._raw) && Array.isArray(inputs[0])) {\n    context.dispatch({\n      type: 'RESET_RAW_EVENTS',\n      sourceId: unfoundSources[0].sourceId,\n      rawEvents: inputs[0]\n    });\n    return;\n  }\n  var newInputs = [];\n  var _iterator5 = _createForOfIteratorHelper(inputs),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var input = _step5.value;\n      var inputFound = false;\n      for (var i = 0; i < unfoundSources.length; i += 1) {\n        if (unfoundSources[i]._raw === input) {\n          unfoundSources.splice(i, 1); // delete\n          inputFound = true;\n          break;\n        }\n      }\n      if (!inputFound) {\n        newInputs.push(input);\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  var _iterator6 = _createForOfIteratorHelper(unfoundSources),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var unfoundSource = _step6.value;\n      context.dispatch({\n        type: 'REMOVE_EVENT_SOURCE',\n        sourceId: unfoundSource.sourceId\n      });\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  for (var _i = 0, _newInputs = newInputs; _i < _newInputs.length; _i++) {\n    var newInput = _newInputs[_i];\n    context.calendarApi.addEventSource(newInput);\n  }\n}\nfunction handleDateProfile(dateProfile, context) {\n  context.emitter.trigger('datesSet', Object.assign(Object.assign({}, buildRangeApiWithTimeZone(dateProfile.activeRange, context.dateEnv)), {\n    view: context.viewApi\n  }));\n}\nfunction handleEventStore(eventStore, context) {\n  var emitter = context.emitter;\n  if (emitter.hasHandlers('eventsSet')) {\n    emitter.trigger('eventsSet', buildEventApis(eventStore, context));\n  }\n}\n\n/*\nthis array is exposed on the root namespace so that UMD plugins can add to it.\nsee the rollup-bundles script.\n*/\nvar globalPlugins = [arrayEventSourcePlugin, funcEventSourcePlugin, jsonFeedEventSourcePlugin, simpleRecurringEventsPlugin, changeHandlerPlugin, createPlugin({\n  name: 'misc',\n  isLoadingFuncs: [function (state) {\n    return computeEventSourcesLoading(state.eventSources);\n  }],\n  propSetHandlers: {\n    dateProfile: handleDateProfile,\n    eventStore: handleEventStore\n  }\n})];\nvar TaskRunner = /*#__PURE__*/function () {\n  function TaskRunner(runTaskOption, drainedOption) {\n    _classCallCheck(this, TaskRunner);\n    this.runTaskOption = runTaskOption;\n    this.drainedOption = drainedOption;\n    this.queue = [];\n    this.delayedRunner = new DelayedRunner(this.drain.bind(this));\n  }\n  _createClass(TaskRunner, [{\n    key: \"request\",\n    value: function request(task, delay) {\n      this.queue.push(task);\n      this.delayedRunner.request(delay);\n    }\n  }, {\n    key: \"pause\",\n    value: function pause(scope) {\n      this.delayedRunner.pause(scope);\n    }\n  }, {\n    key: \"resume\",\n    value: function resume(scope, force) {\n      this.delayedRunner.resume(scope, force);\n    }\n  }, {\n    key: \"drain\",\n    value: function drain() {\n      var queue = this.queue;\n      while (queue.length) {\n        var completedTasks = [];\n        var task = void 0;\n        while (task = queue.shift()) {\n          this.runTask(task);\n          completedTasks.push(task);\n        }\n        this.drained(completedTasks);\n      } // keep going, in case new tasks were added in the drained handler\n    }\n  }, {\n    key: \"runTask\",\n    value: function runTask(task) {\n      if (this.runTaskOption) {\n        this.runTaskOption(task);\n      }\n    }\n  }, {\n    key: \"drained\",\n    value: function drained(completedTasks) {\n      if (this.drainedOption) {\n        this.drainedOption(completedTasks);\n      }\n    }\n  }]);\n  return TaskRunner;\n}(); // Computes what the title at the top of the calendarApi should be for this view\nfunction buildTitle(dateProfile, viewOptions, dateEnv) {\n  var range;\n  // for views that span a large unit of time, show the proper interval, ignoring stray days before and after\n  if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {\n    range = dateProfile.currentRange;\n  } else {\n    // for day units or smaller, use the actual day range\n    range = dateProfile.activeRange;\n  }\n  return dateEnv.formatRange(range.start, range.end, createFormatter(viewOptions.titleFormat || buildTitleFormat(dateProfile)), {\n    isEndExclusive: dateProfile.isRangeAllDay,\n    defaultSeparator: viewOptions.titleRangeSeparator\n  });\n}\n// Generates the format string that should be used to generate the title for the current date range.\n// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.\nfunction buildTitleFormat(dateProfile) {\n  var currentRangeUnit = dateProfile.currentRangeUnit;\n  if (currentRangeUnit === 'year') {\n    return {\n      year: 'numeric'\n    };\n  }\n  if (currentRangeUnit === 'month') {\n    return {\n      year: 'numeric',\n      month: 'long'\n    }; // like \"September 2014\"\n  }\n\n  var days = diffWholeDays(dateProfile.currentRange.start, dateProfile.currentRange.end);\n  if (days !== null && days > 1) {\n    // multi-day range. shorter, like \"Sep 9 - 10 2014\"\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    };\n  }\n  // one day. longer, like \"September 9 2014\"\n  return {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  };\n}\n\n// in future refactor, do the redux-style function(state=initial) for initial-state\n// also, whatever is happening in constructor, have it happen in action queue too\nvar CalendarDataManager = /*#__PURE__*/function () {\n  function CalendarDataManager(props) {\n    var _this = this;\n    _classCallCheck(this, CalendarDataManager);\n    this.computeCurrentViewData = memoize(this._computeCurrentViewData);\n    this.organizeRawLocales = memoize(organizeRawLocales);\n    this.buildLocale = memoize(buildLocale);\n    this.buildPluginHooks = buildBuildPluginHooks();\n    this.buildDateEnv = memoize(buildDateEnv$1);\n    this.buildTheme = memoize(buildTheme);\n    this.parseToolbars = memoize(parseToolbars);\n    this.buildViewSpecs = memoize(buildViewSpecs);\n    this.buildDateProfileGenerator = memoizeObjArg(buildDateProfileGenerator);\n    this.buildViewApi = memoize(buildViewApi);\n    this.buildViewUiProps = memoizeObjArg(buildViewUiProps);\n    this.buildEventUiBySource = memoize(buildEventUiBySource, isPropsEqual);\n    this.buildEventUiBases = memoize(buildEventUiBases);\n    this.parseContextBusinessHours = memoizeObjArg(parseContextBusinessHours);\n    this.buildTitle = memoize(buildTitle);\n    this.emitter = new Emitter();\n    this.actionRunner = new TaskRunner(this._handleAction.bind(this), this.updateData.bind(this));\n    this.currentCalendarOptionsInput = {};\n    this.currentCalendarOptionsRefined = {};\n    this.currentViewOptionsInput = {};\n    this.currentViewOptionsRefined = {};\n    this.currentCalendarOptionsRefiners = {};\n    this.optionsForRefining = [];\n    this.optionsForHandling = [];\n    this.getCurrentData = function () {\n      return _this.data;\n    };\n    this.dispatch = function (action) {\n      _this.actionRunner.request(action); // protects against recursive calls to _handleAction\n    };\n\n    this.props = props;\n    this.actionRunner.pause();\n    var dynamicOptionOverrides = {};\n    var optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);\n    var currentViewType = optionsData.calendarOptions.initialView || optionsData.pluginHooks.initialView;\n    var currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);\n    // wire things up\n    // TODO: not DRY\n    props.calendarApi.currentDataManager = this;\n    this.emitter.setThisContext(props.calendarApi);\n    this.emitter.setOptions(currentViewData.options);\n    var currentDate = getInitialDate(optionsData.calendarOptions, optionsData.dateEnv);\n    var dateProfile = currentViewData.dateProfileGenerator.build(currentDate);\n    if (!rangeContainsMarker(dateProfile.activeRange, currentDate)) {\n      currentDate = dateProfile.currentRange.start;\n    }\n    var calendarContext = {\n      dateEnv: optionsData.dateEnv,\n      options: optionsData.calendarOptions,\n      pluginHooks: optionsData.pluginHooks,\n      calendarApi: props.calendarApi,\n      dispatch: this.dispatch,\n      emitter: this.emitter,\n      getCurrentData: this.getCurrentData\n    };\n    // needs to be after setThisContext\n    var _iterator7 = _createForOfIteratorHelper(optionsData.pluginHooks.contextInit),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var callback = _step7.value;\n        callback(calendarContext);\n      }\n      // NOT DRY\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n    var eventSources = initEventSources(optionsData.calendarOptions, dateProfile, calendarContext);\n    var initialState = {\n      dynamicOptionOverrides: dynamicOptionOverrides,\n      currentViewType: currentViewType,\n      currentDate: currentDate,\n      dateProfile: dateProfile,\n      businessHours: this.parseContextBusinessHours(calendarContext),\n      eventSources: eventSources,\n      eventUiBases: {},\n      eventStore: createEmptyEventStore(),\n      renderableEventStore: createEmptyEventStore(),\n      dateSelection: null,\n      eventSelection: '',\n      eventDrag: null,\n      eventResize: null,\n      selectionConfig: this.buildViewUiProps(calendarContext).selectionConfig\n    };\n    var contextAndState = Object.assign(Object.assign({}, calendarContext), initialState);\n    var _iterator8 = _createForOfIteratorHelper(optionsData.pluginHooks.reducers),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var reducer = _step8.value;\n        Object.assign(initialState, reducer(null, null, contextAndState));\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n    if (computeIsLoading(initialState, calendarContext)) {\n      this.emitter.trigger('loading', true); // NOT DRY\n    }\n\n    this.state = initialState;\n    this.updateData();\n    this.actionRunner.resume();\n  }\n  _createClass(CalendarDataManager, [{\n    key: \"resetOptions\",\n    value: function resetOptions(optionOverrides, changedOptionNames) {\n      var props = this.props;\n      if (changedOptionNames === undefined) {\n        props.optionOverrides = optionOverrides;\n      } else {\n        var _this$optionsForRefin;\n        props.optionOverrides = Object.assign(Object.assign({}, props.optionOverrides || {}), optionOverrides);\n        (_this$optionsForRefin = this.optionsForRefining).push.apply(_this$optionsForRefin, _toConsumableArray(changedOptionNames));\n      }\n      if (changedOptionNames === undefined || changedOptionNames.length) {\n        this.actionRunner.request({\n          type: 'NOTHING'\n        });\n      }\n    }\n  }, {\n    key: \"_handleAction\",\n    value: function _handleAction(action) {\n      var props = this.props,\n        state = this.state,\n        emitter = this.emitter;\n      var dynamicOptionOverrides = reduceDynamicOptionOverrides(state.dynamicOptionOverrides, action);\n      var optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);\n      var currentViewType = reduceViewType(state.currentViewType, action);\n      var currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);\n      // wire things up\n      // TODO: not DRY\n      props.calendarApi.currentDataManager = this;\n      emitter.setThisContext(props.calendarApi);\n      emitter.setOptions(currentViewData.options);\n      var calendarContext = {\n        dateEnv: optionsData.dateEnv,\n        options: optionsData.calendarOptions,\n        pluginHooks: optionsData.pluginHooks,\n        calendarApi: props.calendarApi,\n        dispatch: this.dispatch,\n        emitter: emitter,\n        getCurrentData: this.getCurrentData\n      };\n      var currentDate = state.currentDate,\n        dateProfile = state.dateProfile;\n      if (this.data && this.data.dateProfileGenerator !== currentViewData.dateProfileGenerator) {\n        // hack\n        dateProfile = currentViewData.dateProfileGenerator.build(currentDate);\n      }\n      currentDate = reduceCurrentDate(currentDate, action);\n      dateProfile = reduceDateProfile(dateProfile, action, currentDate, currentViewData.dateProfileGenerator);\n      if (action.type === 'PREV' ||\n      // TODO: move this logic into DateProfileGenerator\n      action.type === 'NEXT' ||\n      // \"\n      !rangeContainsMarker(dateProfile.currentRange, currentDate)) {\n        currentDate = dateProfile.currentRange.start;\n      }\n      var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendarContext);\n      var eventStore = reduceEventStore(state.eventStore, action, eventSources, dateProfile, calendarContext);\n      var isEventsLoading = computeEventSourcesLoading(eventSources); // BAD. also called in this func in computeIsLoading\n      var renderableEventStore = isEventsLoading && !currentViewData.options.progressiveEventRendering ? state.renderableEventStore || eventStore :\n      // try from previous state\n      eventStore;\n      var _this$buildViewUiProp = this.buildViewUiProps(calendarContext),\n        eventUiSingleBase = _this$buildViewUiProp.eventUiSingleBase,\n        selectionConfig = _this$buildViewUiProp.selectionConfig; // will memoize obj\n      var eventUiBySource = this.buildEventUiBySource(eventSources);\n      var eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);\n      var newState = {\n        dynamicOptionOverrides: dynamicOptionOverrides,\n        currentViewType: currentViewType,\n        currentDate: currentDate,\n        dateProfile: dateProfile,\n        eventSources: eventSources,\n        eventStore: eventStore,\n        renderableEventStore: renderableEventStore,\n        selectionConfig: selectionConfig,\n        eventUiBases: eventUiBases,\n        businessHours: this.parseContextBusinessHours(calendarContext),\n        dateSelection: reduceDateSelection(state.dateSelection, action),\n        eventSelection: reduceSelectedEvent(state.eventSelection, action),\n        eventDrag: reduceEventDrag(state.eventDrag, action),\n        eventResize: reduceEventResize(state.eventResize, action)\n      };\n      var contextAndState = Object.assign(Object.assign({}, calendarContext), newState);\n      var _iterator9 = _createForOfIteratorHelper(optionsData.pluginHooks.reducers),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var reducer = _step9.value;\n          Object.assign(newState, reducer(state, action, contextAndState)); // give the OLD state, for old value\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      var wasLoading = computeIsLoading(state, calendarContext);\n      var isLoading = computeIsLoading(newState, calendarContext);\n      // TODO: use propSetHandlers in plugin system\n      if (!wasLoading && isLoading) {\n        emitter.trigger('loading', true);\n      } else if (wasLoading && !isLoading) {\n        emitter.trigger('loading', false);\n      }\n      this.state = newState;\n      if (props.onAction) {\n        props.onAction(action);\n      }\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData() {\n      var props = this.props,\n        state = this.state;\n      var oldData = this.data;\n      var optionsData = this.computeOptionsData(props.optionOverrides, state.dynamicOptionOverrides, props.calendarApi);\n      var currentViewData = this.computeCurrentViewData(state.currentViewType, optionsData, props.optionOverrides, state.dynamicOptionOverrides);\n      var data = this.data = Object.assign(Object.assign(Object.assign({\n        viewTitle: this.buildTitle(state.dateProfile, currentViewData.options, optionsData.dateEnv),\n        calendarApi: props.calendarApi,\n        dispatch: this.dispatch,\n        emitter: this.emitter,\n        getCurrentData: this.getCurrentData\n      }, optionsData), currentViewData), state);\n      var changeHandlers = optionsData.pluginHooks.optionChangeHandlers;\n      var oldCalendarOptions = oldData && oldData.calendarOptions;\n      var newCalendarOptions = optionsData.calendarOptions;\n      if (oldCalendarOptions && oldCalendarOptions !== newCalendarOptions) {\n        if (oldCalendarOptions.timeZone !== newCalendarOptions.timeZone) {\n          // hack\n          state.eventSources = data.eventSources = reduceEventSourcesNewTimeZone(data.eventSources, state.dateProfile, data);\n          state.eventStore = data.eventStore = rezoneEventStoreDates(data.eventStore, oldData.dateEnv, data.dateEnv);\n          state.renderableEventStore = data.renderableEventStore = rezoneEventStoreDates(data.renderableEventStore, oldData.dateEnv, data.dateEnv);\n        }\n        for (var optionName in changeHandlers) {\n          if (this.optionsForHandling.indexOf(optionName) !== -1 || oldCalendarOptions[optionName] !== newCalendarOptions[optionName]) {\n            changeHandlers[optionName](newCalendarOptions[optionName], data);\n          }\n        }\n      }\n      this.optionsForHandling = [];\n      if (props.onData) {\n        props.onData(data);\n      }\n    }\n  }, {\n    key: \"computeOptionsData\",\n    value: function computeOptionsData(optionOverrides, dynamicOptionOverrides, calendarApi) {\n      // TODO: blacklist options that are handled by optionChangeHandlers\n      if (!this.optionsForRefining.length && optionOverrides === this.stableOptionOverrides && dynamicOptionOverrides === this.stableDynamicOptionOverrides) {\n        return this.stableCalendarOptionsData;\n      }\n      var _this$processRawCalen = this.processRawCalendarOptions(optionOverrides, dynamicOptionOverrides),\n        refinedOptions = _this$processRawCalen.refinedOptions,\n        pluginHooks = _this$processRawCalen.pluginHooks,\n        localeDefaults = _this$processRawCalen.localeDefaults,\n        availableLocaleData = _this$processRawCalen.availableLocaleData,\n        extra = _this$processRawCalen.extra;\n      warnUnknownOptions(extra);\n      var dateEnv = this.buildDateEnv(refinedOptions.timeZone, refinedOptions.locale, refinedOptions.weekNumberCalculation, refinedOptions.firstDay, refinedOptions.weekText, pluginHooks, availableLocaleData, refinedOptions.defaultRangeSeparator);\n      var viewSpecs = this.buildViewSpecs(pluginHooks.views, this.stableOptionOverrides, this.stableDynamicOptionOverrides, localeDefaults);\n      var theme = this.buildTheme(refinedOptions, pluginHooks);\n      var toolbarConfig = this.parseToolbars(refinedOptions, this.stableOptionOverrides, theme, viewSpecs, calendarApi);\n      return this.stableCalendarOptionsData = {\n        calendarOptions: refinedOptions,\n        pluginHooks: pluginHooks,\n        dateEnv: dateEnv,\n        viewSpecs: viewSpecs,\n        theme: theme,\n        toolbarConfig: toolbarConfig,\n        localeDefaults: localeDefaults,\n        availableRawLocales: availableLocaleData.map\n      };\n    } // always called from behind a memoizer\n  }, {\n    key: \"processRawCalendarOptions\",\n    value: function processRawCalendarOptions(optionOverrides, dynamicOptionOverrides) {\n      var _this$optionsForHandl;\n      var _mergeRawOptions = mergeRawOptions([BASE_OPTION_DEFAULTS, optionOverrides, dynamicOptionOverrides]),\n        locales = _mergeRawOptions.locales,\n        locale = _mergeRawOptions.locale;\n      var availableLocaleData = this.organizeRawLocales(locales);\n      var availableRawLocales = availableLocaleData.map;\n      var localeDefaults = this.buildLocale(locale || availableLocaleData.defaultCode, availableRawLocales).options;\n      var pluginHooks = this.buildPluginHooks(optionOverrides.plugins || [], globalPlugins);\n      var refiners = this.currentCalendarOptionsRefiners = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, BASE_OPTION_REFINERS), CALENDAR_LISTENER_REFINERS), CALENDAR_OPTION_REFINERS), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);\n      var extra = {};\n      var raw = mergeRawOptions([BASE_OPTION_DEFAULTS, localeDefaults, optionOverrides, dynamicOptionOverrides]);\n      var refined = {};\n      var currentRaw = this.currentCalendarOptionsInput;\n      var currentRefined = this.currentCalendarOptionsRefined;\n      var anyChanges = false;\n      for (var optionName in raw) {\n        if (this.optionsForRefining.indexOf(optionName) === -1 && (raw[optionName] === currentRaw[optionName] || COMPLEX_OPTION_COMPARATORS[optionName] && optionName in currentRaw && COMPLEX_OPTION_COMPARATORS[optionName](currentRaw[optionName], raw[optionName]))) {\n          refined[optionName] = currentRefined[optionName];\n        } else if (refiners[optionName]) {\n          refined[optionName] = refiners[optionName](raw[optionName]);\n          anyChanges = true;\n        } else {\n          extra[optionName] = currentRaw[optionName];\n        }\n      }\n      if (anyChanges) {\n        this.currentCalendarOptionsInput = raw;\n        this.currentCalendarOptionsRefined = refined;\n        this.stableOptionOverrides = optionOverrides;\n        this.stableDynamicOptionOverrides = dynamicOptionOverrides;\n      }\n      (_this$optionsForHandl = this.optionsForHandling).push.apply(_this$optionsForHandl, _toConsumableArray(this.optionsForRefining));\n      this.optionsForRefining = [];\n      return {\n        rawOptions: this.currentCalendarOptionsInput,\n        refinedOptions: this.currentCalendarOptionsRefined,\n        pluginHooks: pluginHooks,\n        availableLocaleData: availableLocaleData,\n        localeDefaults: localeDefaults,\n        extra: extra\n      };\n    }\n  }, {\n    key: \"_computeCurrentViewData\",\n    value: function _computeCurrentViewData(viewType, optionsData, optionOverrides, dynamicOptionOverrides) {\n      var viewSpec = optionsData.viewSpecs[viewType];\n      if (!viewSpec) {\n        throw new Error(\"viewType \\\"\".concat(viewType, \"\\\" is not available. Please make sure you've loaded all neccessary plugins\"));\n      }\n      var _this$processRawViewO = this.processRawViewOptions(viewSpec, optionsData.pluginHooks, optionsData.localeDefaults, optionOverrides, dynamicOptionOverrides),\n        refinedOptions = _this$processRawViewO.refinedOptions,\n        extra = _this$processRawViewO.extra;\n      warnUnknownOptions(extra);\n      var dateProfileGenerator = this.buildDateProfileGenerator({\n        dateProfileGeneratorClass: viewSpec.optionDefaults.dateProfileGeneratorClass,\n        duration: viewSpec.duration,\n        durationUnit: viewSpec.durationUnit,\n        usesMinMaxTime: viewSpec.optionDefaults.usesMinMaxTime,\n        dateEnv: optionsData.dateEnv,\n        calendarApi: this.props.calendarApi,\n        slotMinTime: refinedOptions.slotMinTime,\n        slotMaxTime: refinedOptions.slotMaxTime,\n        showNonCurrentDates: refinedOptions.showNonCurrentDates,\n        dayCount: refinedOptions.dayCount,\n        dateAlignment: refinedOptions.dateAlignment,\n        dateIncrement: refinedOptions.dateIncrement,\n        hiddenDays: refinedOptions.hiddenDays,\n        weekends: refinedOptions.weekends,\n        nowInput: refinedOptions.now,\n        validRangeInput: refinedOptions.validRange,\n        visibleRangeInput: refinedOptions.visibleRange,\n        fixedWeekCount: refinedOptions.fixedWeekCount\n      });\n      var viewApi = this.buildViewApi(viewType, this.getCurrentData, optionsData.dateEnv);\n      return {\n        viewSpec: viewSpec,\n        options: refinedOptions,\n        dateProfileGenerator: dateProfileGenerator,\n        viewApi: viewApi\n      };\n    }\n  }, {\n    key: \"processRawViewOptions\",\n    value: function processRawViewOptions(viewSpec, pluginHooks, localeDefaults, optionOverrides, dynamicOptionOverrides) {\n      var raw = mergeRawOptions([BASE_OPTION_DEFAULTS, viewSpec.optionDefaults, localeDefaults, optionOverrides, viewSpec.optionOverrides, dynamicOptionOverrides]);\n      var refiners = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, BASE_OPTION_REFINERS), CALENDAR_LISTENER_REFINERS), CALENDAR_OPTION_REFINERS), VIEW_OPTION_REFINERS), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);\n      var refined = {};\n      var currentRaw = this.currentViewOptionsInput;\n      var currentRefined = this.currentViewOptionsRefined;\n      var anyChanges = false;\n      var extra = {};\n      for (var optionName in raw) {\n        if (raw[optionName] === currentRaw[optionName] || COMPLEX_OPTION_COMPARATORS[optionName] && COMPLEX_OPTION_COMPARATORS[optionName](raw[optionName], currentRaw[optionName])) {\n          refined[optionName] = currentRefined[optionName];\n        } else {\n          if (raw[optionName] === this.currentCalendarOptionsInput[optionName] || COMPLEX_OPTION_COMPARATORS[optionName] && COMPLEX_OPTION_COMPARATORS[optionName](raw[optionName], this.currentCalendarOptionsInput[optionName])) {\n            if (optionName in this.currentCalendarOptionsRefined) {\n              // might be an \"extra\" prop\n              refined[optionName] = this.currentCalendarOptionsRefined[optionName];\n            }\n          } else if (refiners[optionName]) {\n            refined[optionName] = refiners[optionName](raw[optionName]);\n          } else {\n            extra[optionName] = raw[optionName];\n          }\n          anyChanges = true;\n        }\n      }\n      if (anyChanges) {\n        this.currentViewOptionsInput = raw;\n        this.currentViewOptionsRefined = refined;\n      }\n      return {\n        rawOptions: this.currentViewOptionsInput,\n        refinedOptions: this.currentViewOptionsRefined,\n        extra: extra\n      };\n    }\n  }]);\n  return CalendarDataManager;\n}();\nfunction buildDateEnv$1(timeZone, explicitLocale, weekNumberCalculation, firstDay, weekText, pluginHooks, availableLocaleData, defaultSeparator) {\n  var locale = buildLocale(explicitLocale || availableLocaleData.defaultCode, availableLocaleData.map);\n  return new DateEnv({\n    calendarSystem: 'gregory',\n    timeZone: timeZone,\n    namedTimeZoneImpl: pluginHooks.namedTimeZonedImpl,\n    locale: locale,\n    weekNumberCalculation: weekNumberCalculation,\n    firstDay: firstDay,\n    weekText: weekText,\n    cmdFormatter: pluginHooks.cmdFormatter,\n    defaultSeparator: defaultSeparator\n  });\n}\nfunction buildTheme(options, pluginHooks) {\n  var ThemeClass = pluginHooks.themeClasses[options.themeSystem] || StandardTheme;\n  return new ThemeClass(options);\n}\nfunction buildDateProfileGenerator(props) {\n  var DateProfileGeneratorClass = props.dateProfileGeneratorClass || DateProfileGenerator;\n  return new DateProfileGeneratorClass(props);\n}\nfunction buildViewApi(type, getCurrentData, dateEnv) {\n  return new ViewImpl(type, getCurrentData, dateEnv);\n}\nfunction buildEventUiBySource(eventSources) {\n  return mapHash(eventSources, function (eventSource) {\n    return eventSource.ui;\n  });\n}\nfunction buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {\n  var eventUiBases = {\n    '': eventUiSingleBase\n  };\n  for (var defId in eventDefs) {\n    var def = eventDefs[defId];\n    if (def.sourceId && eventUiBySource[def.sourceId]) {\n      eventUiBases[defId] = eventUiBySource[def.sourceId];\n    }\n  }\n  return eventUiBases;\n}\nfunction buildViewUiProps(calendarContext) {\n  var options = calendarContext.options;\n  return {\n    eventUiSingleBase: createEventUi({\n      display: options.eventDisplay,\n      editable: options.editable,\n      startEditable: options.eventStartEditable,\n      durationEditable: options.eventDurationEditable,\n      constraint: options.eventConstraint,\n      overlap: typeof options.eventOverlap === 'boolean' ? options.eventOverlap : undefined,\n      allow: options.eventAllow,\n      backgroundColor: options.eventBackgroundColor,\n      borderColor: options.eventBorderColor,\n      textColor: options.eventTextColor,\n      color: options.eventColor\n      // classNames: options.eventClassNames // render hook will handle this\n    }, calendarContext),\n    selectionConfig: createEventUi({\n      constraint: options.selectConstraint,\n      overlap: typeof options.selectOverlap === 'boolean' ? options.selectOverlap : undefined,\n      allow: options.selectAllow\n    }, calendarContext)\n  };\n}\nfunction computeIsLoading(state, context) {\n  var _iterator10 = _createForOfIteratorHelper(context.pluginHooks.isLoadingFuncs),\n    _step10;\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var isLoadingFunc = _step10.value;\n      if (isLoadingFunc(state)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n  return false;\n}\nfunction parseContextBusinessHours(calendarContext) {\n  return parseBusinessHours(calendarContext.options.businessHours, calendarContext);\n}\nfunction warnUnknownOptions(options, viewName) {\n  for (var optionName in options) {\n    console.warn(\"Unknown option '\".concat(optionName, \"'\") + (viewName ? \" for view '\".concat(viewName, \"'\") : ''));\n  }\n}\nvar ToolbarSection = /*#__PURE__*/function (_BaseComponent) {\n  _inherits(ToolbarSection, _BaseComponent);\n  function ToolbarSection() {\n    _classCallCheck(this, ToolbarSection);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ToolbarSection).apply(this, arguments));\n  }\n  _createClass(ToolbarSection, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var children = this.props.widgetGroups.map(function (widgetGroup) {\n        return _this2.renderWidgetGroup(widgetGroup);\n      });\n      return createElement.apply(void 0, ['div', {\n        className: 'fc-toolbar-chunk'\n      }].concat(_toConsumableArray(children)));\n    }\n  }, {\n    key: \"renderWidgetGroup\",\n    value: function renderWidgetGroup(widgetGroup) {\n      var props = this.props;\n      var theme = this.context.theme;\n      var children = [];\n      var isOnlyButtons = true;\n      var _iterator11 = _createForOfIteratorHelper(widgetGroup),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var widget = _step11.value;\n          var buttonName = widget.buttonName,\n            buttonClick = widget.buttonClick,\n            buttonText = widget.buttonText,\n            buttonIcon = widget.buttonIcon,\n            buttonHint = widget.buttonHint;\n          if (buttonName === 'title') {\n            isOnlyButtons = false;\n            children.push(createElement(\"h2\", {\n              className: \"fc-toolbar-title\",\n              id: props.titleId\n            }, props.title));\n          } else {\n            var isPressed = buttonName === props.activeButton;\n            var isDisabled = !props.isTodayEnabled && buttonName === 'today' || !props.isPrevEnabled && buttonName === 'prev' || !props.isNextEnabled && buttonName === 'next';\n            var buttonClasses = [\"fc-\".concat(buttonName, \"-button\"), theme.getClass('button')];\n            if (isPressed) {\n              buttonClasses.push(theme.getClass('buttonActive'));\n            }\n            children.push(createElement(\"button\", {\n              type: \"button\",\n              title: typeof buttonHint === 'function' ? buttonHint(props.navUnit) : buttonHint,\n              disabled: isDisabled,\n              \"aria-pressed\": isPressed,\n              className: buttonClasses.join(' '),\n              onClick: buttonClick\n            }, buttonText || (buttonIcon ? createElement(\"span\", {\n              className: buttonIcon\n            }) : '')));\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      if (children.length > 1) {\n        var groupClassName = isOnlyButtons && theme.getClass('buttonGroup') || '';\n        return createElement.apply(void 0, ['div', {\n          className: groupClassName\n        }].concat(children));\n      }\n      return children[0];\n    }\n  }]);\n  return ToolbarSection;\n}(BaseComponent);\nvar Toolbar = /*#__PURE__*/function (_BaseComponent2) {\n  _inherits(Toolbar, _BaseComponent2);\n  function Toolbar() {\n    _classCallCheck(this, Toolbar);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Toolbar).apply(this, arguments));\n  }\n  _createClass(Toolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        model = _this$props.model,\n        extraClassName = _this$props.extraClassName;\n      var forceLtr = false;\n      var startContent;\n      var endContent;\n      var sectionWidgets = model.sectionWidgets;\n      var centerContent = sectionWidgets.center;\n      if (sectionWidgets.left) {\n        forceLtr = true;\n        startContent = sectionWidgets.left;\n      } else {\n        startContent = sectionWidgets.start;\n      }\n      if (sectionWidgets.right) {\n        forceLtr = true;\n        endContent = sectionWidgets.right;\n      } else {\n        endContent = sectionWidgets.end;\n      }\n      var classNames = [extraClassName || '', 'fc-toolbar', forceLtr ? 'fc-toolbar-ltr' : ''];\n      return createElement(\"div\", {\n        className: classNames.join(' ')\n      }, this.renderSection('start', startContent || []), this.renderSection('center', centerContent || []), this.renderSection('end', endContent || []));\n    }\n  }, {\n    key: \"renderSection\",\n    value: function renderSection(key, widgetGroups) {\n      var props = this.props;\n      return createElement(ToolbarSection, {\n        key: key,\n        widgetGroups: widgetGroups,\n        title: props.title,\n        navUnit: props.navUnit,\n        activeButton: props.activeButton,\n        isTodayEnabled: props.isTodayEnabled,\n        isPrevEnabled: props.isPrevEnabled,\n        isNextEnabled: props.isNextEnabled,\n        titleId: props.titleId\n      });\n    }\n  }]);\n  return Toolbar;\n}(BaseComponent);\nvar ViewHarness = /*#__PURE__*/function (_BaseComponent3) {\n  _inherits(ViewHarness, _BaseComponent3);\n  function ViewHarness() {\n    var _this3;\n    _classCallCheck(this, ViewHarness);\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ViewHarness).apply(this, arguments));\n    _this3.state = {\n      availableWidth: null\n    };\n    _this3.handleEl = function (el) {\n      _this3.el = el;\n      setRef(_this3.props.elRef, el);\n      _this3.updateAvailableWidth();\n    };\n    _this3.handleResize = function () {\n      _this3.updateAvailableWidth();\n    };\n    return _this3;\n  }\n  _createClass(ViewHarness, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        state = this.state;\n      var aspectRatio = props.aspectRatio;\n      var classNames = ['fc-view-harness', aspectRatio || props.liquid || props.height ? 'fc-view-harness-active' // harness controls the height\n      : 'fc-view-harness-passive' // let the view do the height\n      ];\n\n      var height = '';\n      var paddingBottom = '';\n      if (aspectRatio) {\n        if (state.availableWidth !== null) {\n          height = state.availableWidth / aspectRatio;\n        } else {\n          // while waiting to know availableWidth, we can't set height to *zero*\n          // because will cause lots of unnecessary scrollbars within scrollgrid.\n          // BETTER: don't start rendering ANYTHING yet until we know container width\n          // NOTE: why not always use paddingBottom? Causes height oscillation (issue 5606)\n          paddingBottom = \"\".concat(1 / aspectRatio * 100, \"%\");\n        }\n      } else {\n        height = props.height || '';\n      }\n      return createElement(\"div\", {\n        \"aria-labelledby\": props.labeledById,\n        ref: this.handleEl,\n        className: classNames.join(' '),\n        style: {\n          height: height,\n          paddingBottom: paddingBottom\n        }\n      }, props.children);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.context.addResizeHandler(this.handleResize);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.context.removeResizeHandler(this.handleResize);\n    }\n  }, {\n    key: \"updateAvailableWidth\",\n    value: function updateAvailableWidth() {\n      if (this.el &&\n      // needed. but why?\n      this.props.aspectRatio // aspectRatio is the only height setting that needs availableWidth\n      ) {\n        this.setState({\n          availableWidth: this.el.offsetWidth\n        });\n      }\n    }\n  }]);\n  return ViewHarness;\n}(BaseComponent);\n/*\nDetects when the user clicks on an event within a DateComponent\n*/\nvar EventClicking = /*#__PURE__*/function (_Interaction) {\n  _inherits(EventClicking, _Interaction);\n  function EventClicking(settings) {\n    var _this4;\n    _classCallCheck(this, EventClicking);\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(EventClicking).call(this, settings));\n    _this4.handleSegClick = function (ev, segEl) {\n      var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this4)),\n        component = _assertThisInitialize.component;\n      var context = component.context;\n      var seg = getElSeg(segEl);\n      if (seg &&\n      // might be the <div> surrounding the more link\n      component.isValidSegDownEl(ev.target)) {\n        // our way to simulate a link click for elements that can't be <a> tags\n        // grab before trigger fired in case trigger trashes DOM thru rerendering\n        var hasUrlContainer = elementClosest(ev.target, '.fc-event-forced-url');\n        var url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';\n        context.emitter.trigger('eventClick', {\n          el: segEl,\n          event: new EventImpl(component.context, seg.eventRange.def, seg.eventRange.instance),\n          jsEvent: ev,\n          view: context.viewApi\n        });\n        if (url && !ev.defaultPrevented) {\n          window.location.href = url;\n        }\n      }\n    };\n    _this4.destroy = listenBySelector(settings.el, 'click', '.fc-event',\n    // on both fg and bg events\n    _this4.handleSegClick);\n    return _this4;\n  }\n  return EventClicking;\n}(Interaction);\n/*\nTriggers events and adds/removes core classNames when the user's pointer\nenters/leaves event-elements of a component.\n*/\nvar EventHovering = /*#__PURE__*/function (_Interaction2) {\n  _inherits(EventHovering, _Interaction2);\n  function EventHovering(settings) {\n    var _this5;\n    _classCallCheck(this, EventHovering);\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(EventHovering).call(this, settings));\n    // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it\n    _this5.handleEventElRemove = function (el) {\n      if (el === _this5.currentSegEl) {\n        _this5.handleSegLeave(null, _this5.currentSegEl);\n      }\n    };\n    _this5.handleSegEnter = function (ev, segEl) {\n      if (getElSeg(segEl)) {\n        // TODO: better way to make sure not hovering over more+ link or its wrapper\n        _this5.currentSegEl = segEl;\n        _this5.triggerEvent('eventMouseEnter', ev, segEl);\n      }\n    };\n    _this5.handleSegLeave = function (ev, segEl) {\n      if (_this5.currentSegEl) {\n        _this5.currentSegEl = null;\n        _this5.triggerEvent('eventMouseLeave', ev, segEl);\n      }\n    };\n    _this5.removeHoverListeners = listenToHoverBySelector(settings.el, '.fc-event',\n    // on both fg and bg events\n    _this5.handleSegEnter, _this5.handleSegLeave);\n    return _this5;\n  }\n  _createClass(EventHovering, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.removeHoverListeners();\n    }\n  }, {\n    key: \"triggerEvent\",\n    value: function triggerEvent(publicEvName, ev, segEl) {\n      var component = this.component;\n      var context = component.context;\n      var seg = getElSeg(segEl);\n      if (!ev || component.isValidSegDownEl(ev.target)) {\n        context.emitter.trigger(publicEvName, {\n          el: segEl,\n          event: new EventImpl(context, seg.eventRange.def, seg.eventRange.instance),\n          jsEvent: ev,\n          view: context.viewApi\n        });\n      }\n    }\n  }]);\n  return EventHovering;\n}(Interaction);\nvar CalendarContent = /*#__PURE__*/function (_PureComponent) {\n  _inherits(CalendarContent, _PureComponent);\n  function CalendarContent() {\n    var _this6;\n    _classCallCheck(this, CalendarContent);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(CalendarContent).apply(this, arguments));\n    _this6.buildViewContext = memoize(buildViewContext);\n    _this6.buildViewPropTransformers = memoize(buildViewPropTransformers);\n    _this6.buildToolbarProps = memoize(buildToolbarProps);\n    _this6.headerRef = createRef();\n    _this6.footerRef = createRef();\n    _this6.interactionsStore = {};\n    // eslint-disable-next-line\n    _this6.state = {\n      viewLabelId: getUniqueDomId()\n    };\n    // Component Registration\n    // -----------------------------------------------------------------------------------------------------------------\n    _this6.registerInteractiveComponent = function (component, settingsInput) {\n      var settings = parseInteractionSettings(component, settingsInput);\n      var DEFAULT_INTERACTIONS = [EventClicking, EventHovering];\n      var interactionClasses = DEFAULT_INTERACTIONS.concat(_this6.props.pluginHooks.componentInteractions);\n      var interactions = interactionClasses.map(function (TheInteractionClass) {\n        return new TheInteractionClass(settings);\n      });\n      _this6.interactionsStore[component.uid] = interactions;\n      interactionSettingsStore[component.uid] = settings;\n    };\n    _this6.unregisterInteractiveComponent = function (component) {\n      var listeners = _this6.interactionsStore[component.uid];\n      if (listeners) {\n        var _iterator12 = _createForOfIteratorHelper(listeners),\n          _step12;\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var listener = _step12.value;\n            listener.destroy();\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n        delete _this6.interactionsStore[component.uid];\n      }\n      delete interactionSettingsStore[component.uid];\n    };\n    // Resizing\n    // -----------------------------------------------------------------------------------------------------------------\n    _this6.resizeRunner = new DelayedRunner(function () {\n      _this6.props.emitter.trigger('_resize', true); // should window resizes be considered \"forced\" ?\n      _this6.props.emitter.trigger('windowResize', {\n        view: _this6.props.viewApi\n      });\n    });\n    _this6.handleWindowResize = function (ev) {\n      var options = _this6.props.options;\n      if (options.handleWindowResize && ev.target === window // avoid jqui events\n      ) {\n        _this6.resizeRunner.request(options.windowResizeDelay);\n      }\n    };\n    return _this6;\n  }\n  /*\n  renders INSIDE of an outer div\n  */\n  _createClass(CalendarContent, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var toolbarConfig = props.toolbarConfig,\n        options = props.options;\n      var toolbarProps = this.buildToolbarProps(props.viewSpec, props.dateProfile, props.dateProfileGenerator, props.currentDate, getNow(props.options.now, props.dateEnv),\n      // TODO: use NowTimer????\n      props.viewTitle);\n      var viewVGrow = false;\n      var viewHeight = '';\n      var viewAspectRatio;\n      if (props.isHeightAuto || props.forPrint) {\n        viewHeight = '';\n      } else if (options.height != null) {\n        viewVGrow = true;\n      } else if (options.contentHeight != null) {\n        viewHeight = options.contentHeight;\n      } else {\n        viewAspectRatio = Math.max(options.aspectRatio, 0.5); // prevent from getting too tall\n      }\n\n      var viewContext = this.buildViewContext(props.viewSpec, props.viewApi, props.options, props.dateProfileGenerator, props.dateEnv, props.theme, props.pluginHooks, props.dispatch, props.getCurrentData, props.emitter, props.calendarApi, this.registerInteractiveComponent, this.unregisterInteractiveComponent);\n      var viewLabelId = toolbarConfig.header && toolbarConfig.header.hasTitle ? this.state.viewLabelId : '';\n      return createElement(ViewContextType.Provider, {\n        value: viewContext\n      }, toolbarConfig.header && createElement(Toolbar, Object.assign({\n        ref: this.headerRef,\n        extraClassName: \"fc-header-toolbar\",\n        model: toolbarConfig.header,\n        titleId: viewLabelId\n      }, toolbarProps)), createElement(ViewHarness, {\n        liquid: viewVGrow,\n        height: viewHeight,\n        aspectRatio: viewAspectRatio,\n        labeledById: viewLabelId\n      }, this.renderView(props), this.buildAppendContent()), toolbarConfig.footer && createElement(Toolbar, Object.assign({\n        ref: this.footerRef,\n        extraClassName: \"fc-footer-toolbar\",\n        model: toolbarConfig.footer,\n        titleId: \"\"\n      }, toolbarProps)));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var props = this.props;\n      this.calendarInteractions = props.pluginHooks.calendarInteractions.map(function (CalendarInteractionClass) {\n        return new CalendarInteractionClass(props);\n      });\n      window.addEventListener('resize', this.handleWindowResize);\n      var propSetHandlers = props.pluginHooks.propSetHandlers;\n      for (var propName in propSetHandlers) {\n        propSetHandlers[propName](props[propName], props);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var props = this.props;\n      var propSetHandlers = props.pluginHooks.propSetHandlers;\n      for (var propName in propSetHandlers) {\n        if (props[propName] !== prevProps[propName]) {\n          propSetHandlers[propName](props[propName], props);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleWindowResize);\n      this.resizeRunner.clear();\n      var _iterator13 = _createForOfIteratorHelper(this.calendarInteractions),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var interaction = _step13.value;\n          interaction.destroy();\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      this.props.emitter.trigger('_unmount');\n    }\n  }, {\n    key: \"buildAppendContent\",\n    value: function buildAppendContent() {\n      var props = this.props;\n      var children = props.pluginHooks.viewContainerAppends.map(function (buildAppendContent) {\n        return buildAppendContent(props);\n      });\n      return createElement.apply(void 0, [Fragment, {}].concat(_toConsumableArray(children)));\n    }\n  }, {\n    key: \"renderView\",\n    value: function renderView(props) {\n      var pluginHooks = props.pluginHooks;\n      var viewSpec = props.viewSpec;\n      var viewProps = {\n        dateProfile: props.dateProfile,\n        businessHours: props.businessHours,\n        eventStore: props.renderableEventStore,\n        eventUiBases: props.eventUiBases,\n        dateSelection: props.dateSelection,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        isHeightAuto: props.isHeightAuto,\n        forPrint: props.forPrint\n      };\n      var transformers = this.buildViewPropTransformers(pluginHooks.viewPropsTransformers);\n      var _iterator14 = _createForOfIteratorHelper(transformers),\n        _step14;\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var transformer = _step14.value;\n          Object.assign(viewProps, transformer.transform(viewProps, props));\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n      var ViewComponent = viewSpec.component;\n      return createElement(ViewComponent, Object.assign({}, viewProps));\n    }\n  }]);\n  return CalendarContent;\n}(PureComponent);\nfunction buildToolbarProps(viewSpec, dateProfile, dateProfileGenerator, currentDate, now, title) {\n  // don't force any date-profiles to valid date profiles (the `false`) so that we can tell if it's invalid\n  var todayInfo = dateProfileGenerator.build(now, undefined, false); // TODO: need `undefined` or else INFINITE LOOP for some reason\n  var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate, false);\n  var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate, false);\n  return {\n    title: title,\n    activeButton: viewSpec.type,\n    navUnit: viewSpec.singleUnit,\n    isTodayEnabled: todayInfo.isValid && !rangeContainsMarker(dateProfile.currentRange, now),\n    isPrevEnabled: prevInfo.isValid,\n    isNextEnabled: nextInfo.isValid\n  };\n}\n// Plugin\n// -----------------------------------------------------------------------------------------------------------------\nfunction buildViewPropTransformers(theClasses) {\n  return theClasses.map(function (TheClass) {\n    return new TheClass();\n  });\n}\nvar Calendar = /*#__PURE__*/function (_CalendarImpl) {\n  _inherits(Calendar, _CalendarImpl);\n  function Calendar(el) {\n    var _this7;\n    var optionOverrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Calendar);\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(Calendar).call(this));\n    _this7.isRendering = false;\n    _this7.isRendered = false;\n    _this7.currentClassNames = [];\n    _this7.customContentRenderId = 0;\n    _this7.handleAction = function (action) {\n      // actions we know we want to render immediately\n      switch (action.type) {\n        case 'SET_EVENT_DRAG':\n        case 'SET_EVENT_RESIZE':\n          _this7.renderRunner.tryDrain();\n      }\n    };\n    _this7.handleData = function (data) {\n      _this7.currentData = data;\n      _this7.renderRunner.request(data.calendarOptions.rerenderDelay);\n    };\n    _this7.handleRenderRequest = function () {\n      if (_this7.isRendering) {\n        _this7.isRendered = true;\n        var _assertThisInitialize2 = _assertThisInitialized(_assertThisInitialized(_this7)),\n          currentData = _assertThisInitialize2.currentData;\n        flushSync(function () {\n          render(createElement(CalendarRoot, {\n            options: currentData.calendarOptions,\n            theme: currentData.theme,\n            emitter: currentData.emitter\n          }, function (classNames, height, isHeightAuto, forPrint) {\n            _this7.setClassNames(classNames);\n            _this7.setHeight(height);\n            return createElement(RenderId.Provider, {\n              value: _this7.customContentRenderId\n            }, createElement(CalendarContent, Object.assign({\n              isHeightAuto: isHeightAuto,\n              forPrint: forPrint\n            }, currentData)));\n          }), _this7.el);\n        });\n      } else if (_this7.isRendered) {\n        _this7.isRendered = false;\n        render(null, _this7.el);\n        _this7.setClassNames([]);\n        _this7.setHeight('');\n      }\n    };\n    ensureElHasStyles(el);\n    _this7.el = el;\n    _this7.renderRunner = new DelayedRunner(_this7.handleRenderRequest);\n    new CalendarDataManager({\n      optionOverrides: optionOverrides,\n      calendarApi: _assertThisInitialized(_assertThisInitialized(_this7)),\n      onAction: _this7.handleAction,\n      onData: _this7.handleData\n    });\n    return _this7;\n  }\n  _createClass(Calendar, [{\n    key: \"render\",\n    value: function render() {\n      var wasRendering = this.isRendering;\n      if (!wasRendering) {\n        this.isRendering = true;\n      } else {\n        this.customContentRenderId += 1;\n      }\n      this.renderRunner.request();\n      if (wasRendering) {\n        this.updateSize();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.isRendering) {\n        this.isRendering = false;\n        this.renderRunner.request();\n      }\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var _this8 = this;\n      flushSync(function () {\n        _get(_getPrototypeOf(Calendar.prototype), \"updateSize\", _this8).call(_this8);\n      });\n    }\n  }, {\n    key: \"batchRendering\",\n    value: function batchRendering(func) {\n      this.renderRunner.pause('batchRendering');\n      func();\n      this.renderRunner.resume('batchRendering');\n    }\n  }, {\n    key: \"pauseRendering\",\n    value: function pauseRendering() {\n      this.renderRunner.pause('pauseRendering');\n    }\n  }, {\n    key: \"resumeRendering\",\n    value: function resumeRendering() {\n      this.renderRunner.resume('pauseRendering', true);\n    }\n  }, {\n    key: \"resetOptions\",\n    value: function resetOptions(optionOverrides, changedOptionNames) {\n      this.currentDataManager.resetOptions(optionOverrides, changedOptionNames);\n    }\n  }, {\n    key: \"setClassNames\",\n    value: function setClassNames(classNames) {\n      if (!isArraysEqual(classNames, this.currentClassNames)) {\n        var classList = this.el.classList;\n        var _iterator15 = _createForOfIteratorHelper(this.currentClassNames),\n          _step15;\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var className = _step15.value;\n            classList.remove(className);\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n        var _iterator16 = _createForOfIteratorHelper(classNames),\n          _step16;\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var _className = _step16.value;\n            classList.add(_className);\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n        this.currentClassNames = classNames;\n      }\n    }\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(height) {\n      applyStyleProp(this.el, 'height', height);\n    }\n  }]);\n  return Calendar;\n}(CalendarImpl);\nfunction formatDate(dateInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var dateEnv = buildDateEnv(options);\n  var formatter = createFormatter(options);\n  var dateMeta = dateEnv.createMarkerMeta(dateInput);\n  if (!dateMeta) {\n    // TODO: warning?\n    return '';\n  }\n  return dateEnv.format(dateMeta.marker, formatter, {\n    forcedTzo: dateMeta.forcedTzo\n  });\n}\nfunction formatRange(startInput, endInput, options) {\n  var dateEnv = buildDateEnv(typeof options === 'object' && options ? options : {}); // pass in if non-null object\n  var formatter = createFormatter(options);\n  var startMeta = dateEnv.createMarkerMeta(startInput);\n  var endMeta = dateEnv.createMarkerMeta(endInput);\n  if (!startMeta || !endMeta) {\n    // TODO: warning?\n    return '';\n  }\n  return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {\n    forcedStartTzo: startMeta.forcedTzo,\n    forcedEndTzo: endMeta.forcedTzo,\n    isEndExclusive: options.isEndExclusive,\n    defaultSeparator: BASE_OPTION_DEFAULTS.defaultRangeSeparator\n  });\n}\n// TODO: more DRY and optimized\nfunction buildDateEnv(settings) {\n  var locale = buildLocale(settings.locale || 'en', organizeRawLocales([]).map); // TODO: don't hardcode 'en' everywhere\n  return new DateEnv(Object.assign(Object.assign({\n    timeZone: BASE_OPTION_DEFAULTS.timeZone,\n    calendarSystem: 'gregory'\n  }, settings), {\n    locale: locale\n  }));\n}\n\n// HELPERS\n/*\nif nextDayThreshold is specified, slicing is done in an all-day fashion.\nyou can get nextDayThreshold from context.nextDayThreshold\n*/\nfunction sliceEvents(props, allDay) {\n  return sliceEventStore(props.eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? props.nextDayThreshold : null).fg;\n}\nvar version = '6.1.7';\nexport { Calendar, createPlugin, formatDate, formatRange, globalLocales, globalPlugins, sliceEvents, version };","map":null,"metadata":{},"sourceType":"module"}